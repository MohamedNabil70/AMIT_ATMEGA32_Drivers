
SSD_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000044a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000db1  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074b  00000000  00000000  00001331  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000820  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  0000229c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f5  00000000  00000000  000023f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006a4  00000000  00000000  000028ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002f91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 22 01 	call	0x244	; 0x244 <main>
  64:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDirection>:
#include "DIO_Interface.h"


void DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PinDirction)
{
	if( (PortId<=3) && (PinId<=7) && ((PinDirction==DIO_PIN_INPUT) || (PinDirction==DIO_PIN_OUTPUT)) ){
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_SetPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <DIO_SetPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_SetPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_SetPinDirection+0xea>
  78:	42 30       	cpi	r20, 0x02	; 2
  7a:	08 f0       	brcs	.+2      	; 0x7e <DIO_SetPinDirection+0x12>
  7c:	6c c0       	rjmp	.+216    	; 0x156 <DIO_SetPinDirection+0xea>
	switch(PortId){
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	01 f1       	breq	.+64     	; 0xc2 <DIO_SetPinDirection+0x56>
  82:	30 f0       	brcs	.+12     	; 0x90 <DIO_SetPinDirection+0x24>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	b1 f1       	breq	.+108    	; 0xf4 <DIO_SetPinDirection+0x88>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_SetPinDirection+0x22>
  8c:	4c c0       	rjmp	.+152    	; 0x126 <DIO_SetPinDirection+0xba>
  8e:	08 95       	ret
		case 0://DIO PORTA
		if(PinDirction==DIO_PIN_OUTPUT){
  90:	41 30       	cpi	r20, 0x01	; 1
  92:	59 f4       	brne	.+22     	; 0xaa <DIO_SetPinDirection+0x3e>
			SET_BIT(DDRA,PinId);
  94:	2a b3       	in	r18, 0x1a	; 26
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <DIO_SetPinDirection+0x34>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <DIO_SetPinDirection+0x30>
  a4:	82 2b       	or	r24, r18
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret
		}
		else{
			CLR_BIT(DDRA,PinId);
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_SetPinDirection+0x4a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_SetPinDirection+0x46>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
		}
		break;
	case 1://DIO PORTB
	if(PinDirction==DIO_PIN_OUTPUT){
  c2:	41 30       	cpi	r20, 0x01	; 1
  c4:	59 f4       	brne	.+22     	; 0xdc <DIO_SetPinDirection+0x70>
		SET_BIT(DDRB,PinId);
  c6:	27 b3       	in	r18, 0x17	; 23
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_SetPinDirection+0x66>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_SetPinDirection+0x62>
  d6:	82 2b       	or	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
  da:	08 95       	ret
	}
	else{
		CLR_BIT(DDRB,PinId);
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPinDirection+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPinDirection+0x78>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	08 95       	ret
	}
	break;
	case 2://DIO PORTC
	if(PinDirction==DIO_PIN_OUTPUT){
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	59 f4       	brne	.+22     	; 0x10e <DIO_SetPinDirection+0xa2>
		SET_BIT(DDRC,PinId);
  f8:	24 b3       	in	r18, 0x14	; 20
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_SetPinDirection+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_SetPinDirection+0x94>
 108:	82 2b       	or	r24, r18
 10a:	84 bb       	out	0x14, r24	; 20
 10c:	08 95       	ret
	}
	else{
		CLR_BIT(DDRC,PinId);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_SetPinDirection+0xae>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_SetPinDirection+0xaa>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	84 bb       	out	0x14, r24	; 20
 124:	08 95       	ret
	}
	break;
	case 3://DIO PORTD
	if(PinDirction==DIO_PIN_OUTPUT){
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	59 f4       	brne	.+22     	; 0x140 <DIO_SetPinDirection+0xd4>
		SET_BIT(DDRD,PinId);
 12a:	21 b3       	in	r18, 0x11	; 17
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_SetPinDirection+0xca>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_SetPinDirection+0xc6>
 13a:	82 2b       	or	r24, r18
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret
	}
	else{
		CLR_BIT(DDRD,PinId);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_SetPinDirection+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_SetPinDirection+0xdc>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <DIO_SetPinValue>:
}
}


void DIO_SetPinValue (u8 PortId,u8 PinId,u8 PinValue){
		if( (PortId<=3) && (PinId<=7) && ((PinValue==DIO_PIN_HIGH) || (PinValue==DIO_PIN_LOW)) ){
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	08 f0       	brcs	.+2      	; 0x15e <DIO_SetPinValue+0x6>
 15c:	72 c0       	rjmp	.+228    	; 0x242 <DIO_SetPinValue+0xea>
 15e:	68 30       	cpi	r22, 0x08	; 8
 160:	08 f0       	brcs	.+2      	; 0x164 <DIO_SetPinValue+0xc>
 162:	6f c0       	rjmp	.+222    	; 0x242 <DIO_SetPinValue+0xea>
 164:	42 30       	cpi	r20, 0x02	; 2
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_SetPinValue+0x12>
 168:	6c c0       	rjmp	.+216    	; 0x242 <DIO_SetPinValue+0xea>
				switch(PortId){
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	01 f1       	breq	.+64     	; 0x1ae <DIO_SetPinValue+0x56>
 16e:	30 f0       	brcs	.+12     	; 0x17c <DIO_SetPinValue+0x24>
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	b1 f1       	breq	.+108    	; 0x1e0 <DIO_SetPinValue+0x88>
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	09 f4       	brne	.+2      	; 0x17a <DIO_SetPinValue+0x22>
 178:	4c c0       	rjmp	.+152    	; 0x212 <DIO_SetPinValue+0xba>
 17a:	08 95       	ret
		           case 0://DIO PORTA
				   if(PinValue==DIO_PIN_HIGH){
 17c:	41 30       	cpi	r20, 0x01	; 1
 17e:	59 f4       	brne	.+22     	; 0x196 <DIO_SetPinValue+0x3e>
					 	SET_BIT(PORTA,PinId); 
 180:	2b b3       	in	r18, 0x1b	; 27
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SetPinValue+0x34>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SetPinValue+0x30>
 190:	82 2b       	or	r24, r18
 192:	8b bb       	out	0x1b, r24	; 27
 194:	08 95       	ret
				   }
				   else{
					  		CLR_BIT(PORTA,PinId);
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SetPinValue+0x4a>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SetPinValue+0x46>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	08 95       	ret
				   }
				   	break;

				   case 1://DIO PORTB
				   if(PinValue==DIO_PIN_HIGH){
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	59 f4       	brne	.+22     	; 0x1c8 <DIO_SetPinValue+0x70>
					   SET_BIT(PORTB,PinId);
 1b2:	28 b3       	in	r18, 0x18	; 24
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_SetPinValue+0x66>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_SetPinValue+0x62>
 1c2:	82 2b       	or	r24, r18
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	08 95       	ret
				   }
				   else{
					   CLR_BIT(PORTB,PinId);
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_SetPinValue+0x7c>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_SetPinValue+0x78>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	08 95       	ret
				   }
				   	break;

				   case 2://DIO PORTC
				   if(PinValue==DIO_PIN_HIGH){
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	59 f4       	brne	.+22     	; 0x1fa <DIO_SetPinValue+0xa2>
					   SET_BIT(PORTC,PinId);
 1e4:	25 b3       	in	r18, 0x15	; 21
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_SetPinValue+0x98>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_SetPinValue+0x94>
 1f4:	82 2b       	or	r24, r18
 1f6:	85 bb       	out	0x15, r24	; 21
 1f8:	08 95       	ret
				   }
				   else{
					   CLR_BIT(PORTC,PinId);
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_SetPinValue+0xae>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_SetPinValue+0xaa>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	85 bb       	out	0x15, r24	; 21
 210:	08 95       	ret
				   }
				   	break;

				   case 3://DIO PORTD
				   if(PinValue==DIO_PIN_HIGH){
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	59 f4       	brne	.+22     	; 0x22c <DIO_SetPinValue+0xd4>
					   SET_BIT(PORTD,PinId);
 216:	22 b3       	in	r18, 0x12	; 18
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinValue+0xca>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinValue+0xc6>
 226:	82 2b       	or	r24, r18
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret
				   }
				   else{
					   CLR_BIT(PORTD,PinId);
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPinValue+0xe0>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPinValue+0xdc>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret

00000244 <main>:


int main(void)
{
	u8 counter;
	for(counter=0;counter<=60;counter++){
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	04 c0       	rjmp	.+8      	; 0x250 <main+0xc>
		SSD_DisplyNumberTwoDigits(counter);
 248:	8c 2f       	mov	r24, r28
 24a:	0e 94 c3 01 	call	0x386	; 0x386 <SSD_DisplyNumberTwoDigits>


int main(void)
{
	u8 counter;
	for(counter=0;counter<=60;counter++){
 24e:	cf 5f       	subi	r28, 0xFF	; 255
 250:	cd 33       	cpi	r28, 0x3D	; 61
 252:	d0 f3       	brcs	.-12     	; 0x248 <main+0x4>
 254:	ff cf       	rjmp	.-2      	; 0x254 <main+0x10>

00000256 <WriteHalfPort>:

void SSD_DisplyNumber(u8 DesiredNumber){
	WriteHalfPort(DesiredNumber);
}

static void WriteHalfPort(u8 value){
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
	
	if(GET_BIT(value,0)==DIO_PIN_HIGH){
 25a:	80 ff       	sbrs	r24, 0
 25c:	06 c0       	rjmp	.+12     	; 0x26a <WriteHalfPort+0x14>
		DIO_SetPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_HIGH);
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	64 e0       	ldi	r22, 0x04	; 4
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
 268:	05 c0       	rjmp	.+10     	; 0x274 <WriteHalfPort+0x1e>
	}
	else{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_LOW);
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	64 e0       	ldi	r22, 0x04	; 4
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	}
	
	if(GET_BIT(value,1)==DIO_PIN_HIGH){
 274:	c1 ff       	sbrs	r28, 1
 276:	06 c0       	rjmp	.+12     	; 0x284 <WriteHalfPort+0x2e>
		DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_HIGH);
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	65 e0       	ldi	r22, 0x05	; 5
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
 282:	05 c0       	rjmp	.+10     	; 0x28e <WriteHalfPort+0x38>
	}
	else{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_LOW);
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	65 e0       	ldi	r22, 0x05	; 5
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	}
	
	if(GET_BIT(value,2)==DIO_PIN_HIGH){
 28e:	c2 ff       	sbrs	r28, 2
 290:	06 c0       	rjmp	.+12     	; 0x29e <WriteHalfPort+0x48>
		DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_HIGH);
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	66 e0       	ldi	r22, 0x06	; 6
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <WriteHalfPort+0x52>
	}
	else{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_LOW);
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	66 e0       	ldi	r22, 0x06	; 6
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	}
	
	if(GET_BIT(value,3)==DIO_PIN_HIGH){
 2a8:	c3 ff       	sbrs	r28, 3
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <WriteHalfPort+0x62>
		DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_HIGH);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	67 e0       	ldi	r22, 0x07	; 7
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <WriteHalfPort+0x6c>
	}
	else{
		DIO_SetPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_LOW);
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	67 e0       	ldi	r22, 0x07	; 7
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	}
	
}
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <SSD_ON>:
//HAL
#include "SSD_Interface.h"



void SSD_ON(u8 connection){
 2c6:	cf 93       	push	r28
 2c8:	c8 2f       	mov	r28, r24
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	64 e0       	ldi	r22, 0x04	; 4
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	65 e0       	ldi	r22, 0x05	; 5
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	66 e0       	ldi	r22, 0x06	; 6
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	67 e0       	ldi	r22, 0x07	; 7
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	switch(connection){
 2f2:	c1 30       	cpi	r28, 0x01	; 1
 2f4:	a1 f0       	breq	.+40     	; 0x31e <SSD_ON+0x58>
 2f6:	18 f0       	brcs	.+6      	; 0x2fe <SSD_ON+0x38>
 2f8:	c2 30       	cpi	r28, 0x02	; 2
 2fa:	09 f1       	breq	.+66     	; 0x33e <SSD_ON+0x78>
 2fc:	2f c0       	rjmp	.+94     	; 0x35c <SSD_ON+0x96>
		case SSD_BothSides:
	DIO_SetPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_HIGH);
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	62 e0       	ldi	r22, 0x02	; 2
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	63 e0       	ldi	r22, 0x03	; 3
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	break;
 31c:	1f c0       	rjmp	.+62     	; 0x35c <SSD_ON+0x96>
	
	case SSD_Left:
	DIO_SetPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_HIGH);
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	62 e0       	ldi	r22, 0x02	; 2
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	63 e0       	ldi	r22, 0x03	; 3
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	break;
 33c:	0f c0       	rjmp	.+30     	; 0x35c <SSD_ON+0x96>
	
	case SSD_Right:
	DIO_SetPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);
 33e:	41 e0       	ldi	r20, 0x01	; 1
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	63 e0       	ldi	r22, 0x03	; 3
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	break;
	}
}
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <SSD_OFF>:
void SSD_OFF(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	63 e0       	ldi	r22, 0x03	; 3
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_SetPinValue>
 37e:	08 95       	ret

00000380 <SSD_DisplyNumber>:
	}
	SSD_OFF();
}

void SSD_DisplyNumber(u8 DesiredNumber){
	WriteHalfPort(DesiredNumber);
 380:	0e 94 2b 01 	call	0x256	; 0x256 <WriteHalfPort>
 384:	08 95       	ret

00000386 <SSD_DisplyNumberTwoDigits>:
void SSD_OFF(void){
	DIO_SetPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
}
void SSD_DisplyNumberTwoDigits(u8 Number){
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	18 2f       	mov	r17, r24
	u8 counter;
	for(counter=0;counter<250;counter++){
 38e:	d0 e0       	ldi	r29, 0x00	; 0
 390:	28 c0       	rjmp	.+80     	; 0x3e2 <SSD_DisplyNumberTwoDigits+0x5c>
	SSD_ON(SSD_Right);
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SSD_ON>
	SSD_DisplyNumber(Number%10);
 398:	cd ec       	ldi	r28, 0xCD	; 205
 39a:	1c 9f       	mul	r17, r28
 39c:	c1 2d       	mov	r28, r1
 39e:	11 24       	eor	r1, r1
 3a0:	c6 95       	lsr	r28
 3a2:	c6 95       	lsr	r28
 3a4:	c6 95       	lsr	r28
 3a6:	9c 2f       	mov	r25, r28
 3a8:	99 0f       	add	r25, r25
 3aa:	89 2f       	mov	r24, r25
 3ac:	88 0f       	add	r24, r24
 3ae:	88 0f       	add	r24, r24
 3b0:	89 0f       	add	r24, r25
 3b2:	91 2f       	mov	r25, r17
 3b4:	98 1b       	sub	r25, r24
 3b6:	89 2f       	mov	r24, r25
 3b8:	0e 94 c0 01 	call	0x380	; 0x380 <SSD_DisplyNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3bc:	8f e9       	ldi	r24, 0x9F	; 159
 3be:	9f e0       	ldi	r25, 0x0F	; 15
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <SSD_DisplyNumberTwoDigits+0x3a>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <SSD_DisplyNumberTwoDigits+0x40>
 3c6:	00 00       	nop
	_delay_ms(1);
	SSD_ON(SSD_Left);
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SSD_ON>
	SSD_DisplyNumber(Number/10);
 3ce:	8c 2f       	mov	r24, r28
 3d0:	0e 94 c0 01 	call	0x380	; 0x380 <SSD_DisplyNumber>
 3d4:	8f e9       	ldi	r24, 0x9F	; 159
 3d6:	9f e0       	ldi	r25, 0x0F	; 15
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <SSD_DisplyNumberTwoDigits+0x52>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <SSD_DisplyNumberTwoDigits+0x58>
 3de:	00 00       	nop
	DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
	DIO_SetPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
}
void SSD_DisplyNumberTwoDigits(u8 Number){
	u8 counter;
	for(counter=0;counter<250;counter++){
 3e0:	df 5f       	subi	r29, 0xFF	; 255
 3e2:	da 3f       	cpi	r29, 0xFA	; 250
 3e4:	b0 f2       	brcs	.-84     	; 0x392 <SSD_DisplyNumberTwoDigits+0xc>
	_delay_ms(1);
	SSD_ON(SSD_Left);
	SSD_DisplyNumber(Number/10);
	_delay_ms(1);
	}
	SSD_OFF();
 3e6:	0e 94 b0 01 	call	0x360	; 0x360 <SSD_OFF>
}
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	08 95       	ret

000003f2 <_exit>:
 3f2:	f8 94       	cli

000003f4 <__stop_program>:
 3f4:	ff cf       	rjmp	.-2      	; 0x3f4 <__stop_program>
