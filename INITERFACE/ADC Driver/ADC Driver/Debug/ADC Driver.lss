
ADC Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000142d  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b3  00000000  00000000  00001b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bc8  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000278  00000000  00000000  00002f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ae  00000000  00000000  00003214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bea  00000000  00000000  000037c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000043ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  64:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:
	
	
	void ADC_init(void)
	{
	//Select Vref
	SET_BIT(ADMUX,6);
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,7);
  72:	87 b1       	in	r24, 0x07	; 7
  74:	8f 77       	andi	r24, 0x7F	; 127
  76:	87 b9       	out	0x07, r24	; 7
	
	//Select Right Adjustment
	CLR_BIT(ADMUX,5);
  78:	87 b1       	in	r24, 0x07	; 7
  7a:	8f 7d       	andi	r24, 0xDF	; 223
  7c:	87 b9       	out	0x07, r24	; 7
	
	//Single conversation mode (Auto trigger off)
	CLR_BIT(ADCSRA,5);
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	8f 7d       	andi	r24, 0xDF	; 223
  82:	86 b9       	out	0x06, r24	; 6

	//Disable interrupt Enable bit
	CLR_BIT(ADCSRA,3);
  84:	86 b1       	in	r24, 0x06	; 6
  86:	87 7f       	andi	r24, 0xF7	; 247
  88:	86 b9       	out	0x06, r24	; 6

//Reduce CLK Frequency by factor of [128] (from 16 Mhz to 125 Khz)
	SET_BIT(ADCSRA,0);
  8a:	86 b1       	in	r24, 0x06	; 6
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,1);
  90:	86 b1       	in	r24, 0x06	; 6
  92:	82 60       	ori	r24, 0x02	; 2
  94:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);
  96:	86 b1       	in	r24, 0x06	; 6
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	86 b9       	out	0x06, r24	; 6
	
	//ADC Enable
	SET_BIT(ADCSRA,7);
  9c:	86 b1       	in	r24, 0x06	; 6
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	86 b9       	out	0x06, r24	; 6
  a2:	08 95       	ret

000000a4 <ADC_getDigitalValue>:
	}
	
	
	void ADC_getDigitalValue(u8 channelNum , u16* digitalReading)
	{
		if ((channelNum<32) && (digitalReading!=NULL))
  a4:	80 32       	cpi	r24, 0x20	; 32
  a6:	b0 f4       	brcc	.+44     	; 0xd4 <ADC_getDigitalValue+0x30>
  a8:	61 15       	cp	r22, r1
  aa:	71 05       	cpc	r23, r1
  ac:	99 f0       	breq	.+38     	; 0xd4 <ADC_getDigitalValue+0x30>
		{
		//clear only  ADC channel bits from ADMUX REG       
		ADMUX &= 0b11100000;			 
  ae:	97 b1       	in	r25, 0x07	; 7
  b0:	90 7e       	andi	r25, 0xE0	; 224
  b2:	97 b9       	out	0x07, r25	; 7
		//add only ADC channel bits to ADMUX REG	
		ADMUX |= channelNum;
  b4:	97 b1       	in	r25, 0x07	; 7
  b6:	89 2b       	or	r24, r25
  b8:	87 b9       	out	0x07, r24	; 7
		
		//Start Conversion
		SET_BIT(ADCSRA,6);
  ba:	86 b1       	in	r24, 0x06	; 6
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	86 b9       	out	0x06, r24	; 6
		
		//Polling with blocking for Flag
		while(GET_BIT(ADCSRA,4) == 0);
  c0:	34 9b       	sbis	0x06, 4	; 6
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <ADC_getDigitalValue+0x1c>
		
		//Clear flag by setting it to 1 (write 1 to clr)
		SET_BIT(ADCSRA,4);
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	86 b9       	out	0x06, r24	; 6
		
		*digitalReading=ADC_u16;		
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	95 b1       	in	r25, 0x05	; 5
  ce:	fb 01       	movw	r30, r22
  d0:	91 83       	std	Z+1, r25	; 0x01
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <ADC_getAnalogValue>:

		}
	}
	
	void ADC_getAnalogValue(u8 channelNum, u16* analogReading)
	{
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <ADC_getAnalogValue+0xa>
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	8b 01       	movw	r16, r22
			u16 digitalVal;
			ADC_getDigitalValue(channelNum ,&digitalVal);
  e6:	be 01       	movw	r22, r28
  e8:	6f 5f       	subi	r22, 0xFF	; 255
  ea:	7f 4f       	sbci	r23, 0xFF	; 255
  ec:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC_getDigitalValue>
			
			*analogReading=(((u32)digitalVal*5000UL)/(1024));
  f0:	29 81       	ldd	r18, Y+1	; 0x01
  f2:	3a 81       	ldd	r19, Y+2	; 0x02
  f4:	a8 e8       	ldi	r26, 0x88	; 136
  f6:	b3 e1       	ldi	r27, 0x13	; 19
  f8:	0e 94 6d 02 	call	0x4da	; 0x4da <__umulhisi3>
  fc:	dc 01       	movw	r26, r24
  fe:	cb 01       	movw	r24, r22
 100:	07 2e       	mov	r0, r23
 102:	7a e0       	ldi	r23, 0x0A	; 10
 104:	b6 95       	lsr	r27
 106:	a7 95       	ror	r26
 108:	97 95       	ror	r25
 10a:	87 95       	ror	r24
 10c:	7a 95       	dec	r23
 10e:	d1 f7       	brne	.-12     	; 0x104 <ADC_getAnalogValue+0x2e>
 110:	70 2d       	mov	r23, r0
 112:	f8 01       	movw	r30, r16
 114:	91 83       	std	Z+1, r25	; 0x01
 116:	80 83       	st	Z, r24
				
	}
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

00000126 <DIO_setPinDirection>:


/*Pin Apis*/
void DIO_setPinDirection(u8 PortId,u8 PinId,u8 PinDirection)
{
if((PortId<=3)&&(PinId<=7)&&((PinDirection== DIO_PIN_INPUT)||(PinDirection==DIO_PIN_OUTPUT)))
 126:	84 30       	cpi	r24, 0x04	; 4
 128:	08 f0       	brcs	.+2      	; 0x12c <DIO_setPinDirection+0x6>
 12a:	72 c0       	rjmp	.+228    	; 0x210 <DIO_setPinDirection+0xea>
 12c:	68 30       	cpi	r22, 0x08	; 8
 12e:	08 f0       	brcs	.+2      	; 0x132 <DIO_setPinDirection+0xc>
 130:	6f c0       	rjmp	.+222    	; 0x210 <DIO_setPinDirection+0xea>
 132:	42 30       	cpi	r20, 0x02	; 2
 134:	08 f0       	brcs	.+2      	; 0x138 <DIO_setPinDirection+0x12>
 136:	6c c0       	rjmp	.+216    	; 0x210 <DIO_setPinDirection+0xea>
{
switch(PortId)
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	01 f1       	breq	.+64     	; 0x17c <DIO_setPinDirection+0x56>
 13c:	30 f0       	brcs	.+12     	; 0x14a <DIO_setPinDirection+0x24>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	b1 f1       	breq	.+108    	; 0x1ae <DIO_setPinDirection+0x88>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	09 f4       	brne	.+2      	; 0x148 <DIO_setPinDirection+0x22>
 146:	4c c0       	rjmp	.+152    	; 0x1e0 <DIO_setPinDirection+0xba>
 148:	08 95       	ret
{
	case DIO_PORTA:
	if(1==PinDirection)
 14a:	41 30       	cpi	r20, 0x01	; 1
 14c:	59 f4       	brne	.+22     	; 0x164 <DIO_setPinDirection+0x3e>
	{
	SET_BIT(DDRA,PinId);	
 14e:	2a b3       	in	r18, 0x1a	; 26
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_setPinDirection+0x34>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_setPinDirection+0x30>
 15e:	82 2b       	or	r24, r18
 160:	8a bb       	out	0x1a, r24	; 26
 162:	08 95       	ret
	}else{
	CLR_BIT(DDRA,PinId);	
 164:	2a b3       	in	r18, 0x1a	; 26
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_setPinDirection+0x4a>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_setPinDirection+0x46>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	8a bb       	out	0x1a, r24	; 26
 17a:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(1==PinDirection)
 17c:	41 30       	cpi	r20, 0x01	; 1
 17e:	59 f4       	brne	.+22     	; 0x196 <DIO_setPinDirection+0x70>
	{
	SET_BIT(DDRB,PinId);	
 180:	27 b3       	in	r18, 0x17	; 23
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_setPinDirection+0x66>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_setPinDirection+0x62>
 190:	82 2b       	or	r24, r18
 192:	87 bb       	out	0x17, r24	; 23
 194:	08 95       	ret
	}else{
	CLR_BIT(DDRB,PinId);	
 196:	27 b3       	in	r18, 0x17	; 23
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinDirection+0x7c>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinDirection+0x78>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	87 bb       	out	0x17, r24	; 23
 1ac:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(1==PinDirection)
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	59 f4       	brne	.+22     	; 0x1c8 <DIO_setPinDirection+0xa2>
	{
	SET_BIT(DDRC,PinId);	
 1b2:	24 b3       	in	r18, 0x14	; 20
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_setPinDirection+0x98>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_setPinDirection+0x94>
 1c2:	82 2b       	or	r24, r18
 1c4:	84 bb       	out	0x14, r24	; 20
 1c6:	08 95       	ret
	}else{
	CLR_BIT(DDRC,PinId);	
 1c8:	24 b3       	in	r18, 0x14	; 20
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinDirection+0xae>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinDirection+0xaa>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	84 bb       	out	0x14, r24	; 20
 1de:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(1==PinDirection)
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	59 f4       	brne	.+22     	; 0x1fa <DIO_setPinDirection+0xd4>
	{
	SET_BIT(DDRD,PinId);	
 1e4:	21 b3       	in	r18, 0x11	; 17
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_setPinDirection+0xca>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_setPinDirection+0xc6>
 1f4:	82 2b       	or	r24, r18
 1f6:	81 bb       	out	0x11, r24	; 17
 1f8:	08 95       	ret
	}else{
	CLR_BIT(DDRD,PinId);	
 1fa:	21 b3       	in	r18, 0x11	; 17
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinDirection+0xe0>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinDirection+0xdc>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	81 bb       	out	0x11, r24	; 17
 210:	08 95       	ret

00000212 <DIO_setPinValue>:
}


void DIO_setPinValue	(u8 PortId,u8 PinId,u8 PinValue)
{
if((PortId<=3)&&(PinId<=7)&&((PinValue==DIO_PIN_LOW)||(PinValue==DIO_PIN_HIGH)))
 212:	84 30       	cpi	r24, 0x04	; 4
 214:	08 f0       	brcs	.+2      	; 0x218 <DIO_setPinValue+0x6>
 216:	72 c0       	rjmp	.+228    	; 0x2fc <DIO_setPinValue+0xea>
 218:	68 30       	cpi	r22, 0x08	; 8
 21a:	08 f0       	brcs	.+2      	; 0x21e <DIO_setPinValue+0xc>
 21c:	6f c0       	rjmp	.+222    	; 0x2fc <DIO_setPinValue+0xea>
 21e:	42 30       	cpi	r20, 0x02	; 2
 220:	08 f0       	brcs	.+2      	; 0x224 <DIO_setPinValue+0x12>
 222:	6c c0       	rjmp	.+216    	; 0x2fc <DIO_setPinValue+0xea>
{
switch(PortId)
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	01 f1       	breq	.+64     	; 0x268 <DIO_setPinValue+0x56>
 228:	30 f0       	brcs	.+12     	; 0x236 <DIO_setPinValue+0x24>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	b1 f1       	breq	.+108    	; 0x29a <DIO_setPinValue+0x88>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	09 f4       	brne	.+2      	; 0x234 <DIO_setPinValue+0x22>
 232:	4c c0       	rjmp	.+152    	; 0x2cc <DIO_setPinValue+0xba>
 234:	08 95       	ret
{
	case DIO_PORTA:
	if(DIO_PIN_HIGH==PinValue)
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	59 f4       	brne	.+22     	; 0x250 <DIO_setPinValue+0x3e>
	{
	SET_BIT(PORTA,PinId);	
 23a:	2b b3       	in	r18, 0x1b	; 27
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_setPinValue+0x34>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_setPinValue+0x30>
 24a:	82 2b       	or	r24, r18
 24c:	8b bb       	out	0x1b, r24	; 27
 24e:	08 95       	ret
	}else{
	CLR_BIT(PORTA,PinId);	
 250:	2b b3       	in	r18, 0x1b	; 27
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_setPinValue+0x4a>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_setPinValue+0x46>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	8b bb       	out	0x1b, r24	; 27
 266:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(DIO_PIN_HIGH==PinValue)
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	59 f4       	brne	.+22     	; 0x282 <DIO_setPinValue+0x70>
	{
	SET_BIT(PORTB,PinId);	
 26c:	28 b3       	in	r18, 0x18	; 24
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_setPinValue+0x66>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_setPinValue+0x62>
 27c:	82 2b       	or	r24, r18
 27e:	88 bb       	out	0x18, r24	; 24
 280:	08 95       	ret
	}else{
	CLR_BIT(PORTB,PinId);	
 282:	28 b3       	in	r18, 0x18	; 24
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_setPinValue+0x7c>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_setPinValue+0x78>
 292:	80 95       	com	r24
 294:	82 23       	and	r24, r18
 296:	88 bb       	out	0x18, r24	; 24
 298:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(DIO_PIN_HIGH==PinValue)
 29a:	41 30       	cpi	r20, 0x01	; 1
 29c:	59 f4       	brne	.+22     	; 0x2b4 <DIO_setPinValue+0xa2>
	{
	SET_BIT(PORTC,PinId);	
 29e:	25 b3       	in	r18, 0x15	; 21
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_setPinValue+0x98>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_setPinValue+0x94>
 2ae:	82 2b       	or	r24, r18
 2b0:	85 bb       	out	0x15, r24	; 21
 2b2:	08 95       	ret
	}else{
	CLR_BIT(PORTC,PinId);	
 2b4:	25 b3       	in	r18, 0x15	; 21
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_setPinValue+0xae>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_setPinValue+0xaa>
 2c4:	80 95       	com	r24
 2c6:	82 23       	and	r24, r18
 2c8:	85 bb       	out	0x15, r24	; 21
 2ca:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(DIO_PIN_HIGH==PinValue)
 2cc:	41 30       	cpi	r20, 0x01	; 1
 2ce:	59 f4       	brne	.+22     	; 0x2e6 <DIO_setPinValue+0xd4>
	{
	SET_BIT(PORTD,PinId);	
 2d0:	22 b3       	in	r18, 0x12	; 18
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_setPinValue+0xca>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_setPinValue+0xc6>
 2e0:	82 2b       	or	r24, r18
 2e2:	82 bb       	out	0x12, r24	; 18
 2e4:	08 95       	ret
	}else{
	CLR_BIT(PORTD,PinId);	
 2e6:	22 b3       	in	r18, 0x12	; 18
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_setPinValue+0xe0>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_setPinValue+0xdc>
 2f6:	80 95       	com	r24
 2f8:	82 23       	and	r24, r18
 2fa:	82 bb       	out	0x12, r24	; 18
 2fc:	08 95       	ret

000002fe <main>:
	#include "SSD_interface.h"



int main(void)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	00 d0       	rcall	.+0      	; 0x304 <main+0x6>
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 93 00 	call	0x126	; 0x126 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	62 e0       	ldi	r22, 0x02	; 2
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 93 00 	call	0x126	; 0x126 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 93 00 	call	0x126	; 0x126 <DIO_setPinDirection>

	/* Data Pins Direction */
	DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	64 e0       	ldi	r22, 0x04	; 4
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 93 00 	call	0x126	; 0x126 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	65 e0       	ldi	r22, 0x05	; 5
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 93 00 	call	0x126	; 0x126 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	66 e0       	ldi	r22, 0x06	; 6
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 93 00 	call	0x126	; 0x126 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	67 e0       	ldi	r22, 0x07	; 7
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 93 00 	call	0x126	; 0x126 <DIO_setPinDirection>
	
/* POT Direction */
 DIO_setPinDirection(DIO_PORTA,DIO_PIN1,DIO_PIN_INPUT); 
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 93 00 	call	0x126	; 0x126 <DIO_setPinDirection>

/* Buzzer Direction */

DIO_setPinDirection(DIO_PORTA,DIO_PIN3,DIO_PIN_OUTPUT);
 358:	41 e0       	ldi	r20, 0x01	; 1
 35a:	63 e0       	ldi	r22, 0x03	; 3
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 93 00 	call	0x126	; 0x126 <DIO_setPinDirection>

	ADC_init();
 362:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
	

	
	u16 check=0,AnalogVal;
 366:	00 e0       	ldi	r16, 0x00	; 0
 368:	10 e0       	ldi	r17, 0x00	; 0
	while (1) 
    {
	ADC_getAnalogValue(ADC_CHANNEL_1,&AnalogVal);
 36a:	be 01       	movw	r22, r28
 36c:	6f 5f       	subi	r22, 0xFF	; 255
 36e:	7f 4f       	sbci	r23, 0xFF	; 255
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_getAnalogValue>

	
	if(check!=AnalogVal/50)
 376:	29 81       	ldd	r18, Y+1	; 0x01
 378:	3a 81       	ldd	r19, Y+2	; 0x02
 37a:	36 95       	lsr	r19
 37c:	27 95       	ror	r18
 37e:	ab e7       	ldi	r26, 0x7B	; 123
 380:	b4 e1       	ldi	r27, 0x14	; 20
 382:	0e 94 6d 02 	call	0x4da	; 0x4da <__umulhisi3>
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	08 17       	cp	r16, r24
 38c:	19 07       	cpc	r17, r25
 38e:	09 f1       	breq	.+66     	; 0x3d2 <main+0xd4>
	{
			SSD_displayNumber(AnalogVal/50);
 390:	0e 94 40 02 	call	0x480	; 0x480 <SSD_displayNumber>
		DIO_setPinValue(DIO_PORTA,DIO_PIN3,DIO_PIN_HIGH);
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	63 e0       	ldi	r22, 0x03	; 3
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39e:	2f e7       	ldi	r18, 0x7F	; 127
 3a0:	88 e3       	ldi	r24, 0x38	; 56
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0xa6>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <main+0xb0>
 3ae:	00 00       	nop
		_delay_ms(25);
		DIO_setPinValue(DIO_PORTA,DIO_PIN3,DIO_PIN_LOW);
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	63 e0       	ldi	r22, 0x03	; 3
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
		check=AnalogVal/50;	
 3ba:	29 81       	ldd	r18, Y+1	; 0x01
 3bc:	3a 81       	ldd	r19, Y+2	; 0x02
 3be:	36 95       	lsr	r19
 3c0:	27 95       	ror	r18
 3c2:	ab e7       	ldi	r26, 0x7B	; 123
 3c4:	b4 e1       	ldi	r27, 0x14	; 20
 3c6:	0e 94 6d 02 	call	0x4da	; 0x4da <__umulhisi3>
 3ca:	8c 01       	movw	r16, r24
 3cc:	16 95       	lsr	r17
 3ce:	07 95       	ror	r16
 3d0:	cc cf       	rjmp	.-104    	; 0x36a <main+0x6c>
	}else{
	SSD_displayNumber(check);
 3d2:	80 2f       	mov	r24, r16
 3d4:	0e 94 40 02 	call	0x480	; 0x480 <SSD_displayNumber>
 3d8:	c8 cf       	rjmp	.-112    	; 0x36a <main+0x6c>

000003da <writeHalfPort>:

void SSD_off(void)
{
DIO_setPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
DIO_setPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);	
 3da:	cf 93       	push	r28
 3dc:	c8 2f       	mov	r28, r24
 3de:	80 ff       	sbrs	r24, 0
 3e0:	06 c0       	rjmp	.+12     	; 0x3ee <writeHalfPort+0x14>
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	64 e0       	ldi	r22, 0x04	; 4
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <writeHalfPort+0x1e>
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	64 e0       	ldi	r22, 0x04	; 4
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
 3f8:	c1 ff       	sbrs	r28, 1
 3fa:	06 c0       	rjmp	.+12     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	65 e0       	ldi	r22, 0x05	; 5
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
 406:	05 c0       	rjmp	.+10     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	65 e0       	ldi	r22, 0x05	; 5
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
 412:	c2 ff       	sbrs	r28, 2
 414:	06 c0       	rjmp	.+12     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	66 e0       	ldi	r22, 0x06	; 6
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
 420:	05 c0       	rjmp	.+10     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	66 e0       	ldi	r22, 0x06	; 6
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
 42c:	c3 ff       	sbrs	r28, 3
 42e:	06 c0       	rjmp	.+12     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	67 e0       	ldi	r22, 0x07	; 7
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	67 e0       	ldi	r22, 0x07	; 7
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <SSD_displayDigit>:
}

void SSD_displayDigit(u8 digit)
{
writeHalfPort(digit);	
 44a:	0e 94 ed 01 	call	0x3da	; 0x3da <writeHalfPort>
 44e:	08 95       	ret

00000450 <SSD_on_right>:

//Digit [on/off] Functions

void SSD_on_right(void)
{
	DIO_setPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
 45a:	08 95       	ret

0000045c <SSD_on_left>:
}

void SSD_on_left(void)
{
	DIO_setPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_HIGH);
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	62 e0       	ldi	r22, 0x02	; 2
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
 466:	08 95       	ret

00000468 <SSD_off_right>:
}

void SSD_off_right(void)
{
	DIO_setPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	61 e0       	ldi	r22, 0x01	; 1
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
 472:	08 95       	ret

00000474 <SSD_off_left>:

}

void SSD_off_left(void)
{
	DIO_setPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	62 e0       	ldi	r22, 0x02	; 2
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 09 01 	call	0x212	; 0x212 <DIO_setPinValue>
 47e:	08 95       	ret

00000480 <SSD_displayNumber>:


//Display 2 Digit Number Functions

void SSD_displayNumber(u8 number)
{
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	d8 2f       	mov	r29, r24

		SSD_displayDigit(number/10);
 486:	cd ec       	ldi	r28, 0xCD	; 205
 488:	8c 9f       	mul	r24, r28
 48a:	c1 2d       	mov	r28, r1
 48c:	11 24       	eor	r1, r1
 48e:	c6 95       	lsr	r28
 490:	c6 95       	lsr	r28
 492:	c6 95       	lsr	r28
 494:	8c 2f       	mov	r24, r28
 496:	0e 94 25 02 	call	0x44a	; 0x44a <SSD_displayDigit>
		SSD_on_left();
 49a:	0e 94 2e 02 	call	0x45c	; 0x45c <SSD_on_left>
 49e:	8f e1       	ldi	r24, 0x1F	; 31
 4a0:	9e e4       	ldi	r25, 0x4E	; 78
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <SSD_displayNumber+0x22>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <SSD_displayNumber+0x28>
 4a8:	00 00       	nop
		_delay_ms(5);
		SSD_off_left();
 4aa:	0e 94 3a 02 	call	0x474	; 0x474 <SSD_off_left>
		
		SSD_displayDigit(number%10);
 4ae:	cc 0f       	add	r28, r28
 4b0:	8c 2f       	mov	r24, r28
 4b2:	88 0f       	add	r24, r24
 4b4:	88 0f       	add	r24, r24
 4b6:	c8 0f       	add	r28, r24
 4b8:	8d 2f       	mov	r24, r29
 4ba:	8c 1b       	sub	r24, r28
 4bc:	0e 94 25 02 	call	0x44a	; 0x44a <SSD_displayDigit>
		SSD_on_right();
 4c0:	0e 94 28 02 	call	0x450	; 0x450 <SSD_on_right>
 4c4:	8f e1       	ldi	r24, 0x1F	; 31
 4c6:	9e e4       	ldi	r25, 0x4E	; 78
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <SSD_displayNumber+0x48>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <SSD_displayNumber+0x4e>
 4ce:	00 00       	nop
		_delay_ms(5);
		SSD_off_right();
 4d0:	0e 94 34 02 	call	0x468	; 0x468 <SSD_off_right>

}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <__umulhisi3>:
 4da:	a2 9f       	mul	r26, r18
 4dc:	b0 01       	movw	r22, r0
 4de:	b3 9f       	mul	r27, r19
 4e0:	c0 01       	movw	r24, r0
 4e2:	a3 9f       	mul	r26, r19
 4e4:	70 0d       	add	r23, r0
 4e6:	81 1d       	adc	r24, r1
 4e8:	11 24       	eor	r1, r1
 4ea:	91 1d       	adc	r25, r1
 4ec:	b2 9f       	mul	r27, r18
 4ee:	70 0d       	add	r23, r0
 4f0:	81 1d       	adc	r24, r1
 4f2:	11 24       	eor	r1, r1
 4f4:	91 1d       	adc	r25, r1
 4f6:	08 95       	ret

000004f8 <_exit>:
 4f8:	f8 94       	cli

000004fa <__stop_program>:
 4fa:	ff cf       	rjmp	.-2      	; 0x4fa <__stop_program>
