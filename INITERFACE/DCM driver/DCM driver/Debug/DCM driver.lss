
DCM driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000506  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000506  0000059a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800062  00800062  0000059c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000130a  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f1  00000000  00000000  00001a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae9  00000000  00000000  0000234b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00002e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e7  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000093b  00000000  00000000  000036db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004016  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_10>
  2c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  8a:	0c 94 81 02 	jmp	0x502	; 0x502 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DCM_init>:
		DIO_setPinValue(H_CONTROL_PORT,H_A3_PIN,DIO_PIN_LOW);
		DIO_setPinValue(H_CONTROL_PORT,H_A4_PIN,DIO_PIN_HIGH);
	}

}	
}
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	64 e0       	ldi	r22, 0x04	; 4
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_setPinDirection>
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	65 e0       	ldi	r22, 0x05	; 5
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_setPinDirection>
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	63 e0       	ldi	r22, 0x03	; 3
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_setPinDirection>
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	64 e0       	ldi	r22, 0x04	; 4
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_setPinDirection>
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	65 e0       	ldi	r22, 0x05	; 5
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_setPinDirection>
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	66 e0       	ldi	r22, 0x06	; 6
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_setPinDirection>
  ce:	08 95       	ret

000000d0 <DCM_setSpeedRatio>:
void DCM_setSpeedRatio(u32 speedRatio)
{
	 //Set OCR0 according to timer 0  fast PWM mode calculations
	 //in order to get PWM with duty cycle of (speedRatio %)
	 
	 TMR_timer0SetCompareMatchValue((speedRatio*1024UL)/400);	
  d0:	05 2e       	mov	r0, r21
  d2:	5a e0       	ldi	r21, 0x0A	; 10
  d4:	66 0f       	add	r22, r22
  d6:	77 1f       	adc	r23, r23
  d8:	88 1f       	adc	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	5a 95       	dec	r21
  de:	d1 f7       	brne	.-12     	; 0xd4 <DCM_setSpeedRatio+0x4>
  e0:	50 2d       	mov	r21, r0
  e2:	20 e9       	ldi	r18, 0x90	; 144
  e4:	31 e0       	ldi	r19, 0x01	; 1
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	0e 94 5f 02 	call	0x4be	; 0x4be <__udivmodsi4>
  ee:	82 2f       	mov	r24, r18
  f0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <TMR_timer0SetCompareMatchValue>
  f4:	08 95       	ret

000000f6 <DIO_setPinDirection>:


/*Pin Apis*/
void DIO_setPinDirection(u8 PortId,u8 PinId,u8 PinDirection)
{
if((PortId<=3)&&(PinId<=7)&&((PinDirection== DIO_PIN_INPUT)||(PinDirection==DIO_PIN_OUTPUT)))
  f6:	84 30       	cpi	r24, 0x04	; 4
  f8:	08 f0       	brcs	.+2      	; 0xfc <DIO_setPinDirection+0x6>
  fa:	72 c0       	rjmp	.+228    	; 0x1e0 <DIO_setPinDirection+0xea>
  fc:	68 30       	cpi	r22, 0x08	; 8
  fe:	08 f0       	brcs	.+2      	; 0x102 <DIO_setPinDirection+0xc>
 100:	6f c0       	rjmp	.+222    	; 0x1e0 <DIO_setPinDirection+0xea>
 102:	42 30       	cpi	r20, 0x02	; 2
 104:	08 f0       	brcs	.+2      	; 0x108 <DIO_setPinDirection+0x12>
 106:	6c c0       	rjmp	.+216    	; 0x1e0 <DIO_setPinDirection+0xea>
{
switch(PortId)
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	01 f1       	breq	.+64     	; 0x14c <DIO_setPinDirection+0x56>
 10c:	30 f0       	brcs	.+12     	; 0x11a <DIO_setPinDirection+0x24>
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	b1 f1       	breq	.+108    	; 0x17e <DIO_setPinDirection+0x88>
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	09 f4       	brne	.+2      	; 0x118 <DIO_setPinDirection+0x22>
 116:	4c c0       	rjmp	.+152    	; 0x1b0 <DIO_setPinDirection+0xba>
 118:	08 95       	ret
{
	case DIO_PORTA:
	if(1==PinDirection)
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	59 f4       	brne	.+22     	; 0x134 <DIO_setPinDirection+0x3e>
	{
	SET_BIT(DDRA,PinId);	
 11e:	2a b3       	in	r18, 0x1a	; 26
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_setPinDirection+0x34>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_setPinDirection+0x30>
 12e:	82 2b       	or	r24, r18
 130:	8a bb       	out	0x1a, r24	; 26
 132:	08 95       	ret
	}else{
	CLR_BIT(DDRA,PinId);	
 134:	2a b3       	in	r18, 0x1a	; 26
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_setPinDirection+0x4a>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_setPinDirection+0x46>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	8a bb       	out	0x1a, r24	; 26
 14a:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(1==PinDirection)
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	59 f4       	brne	.+22     	; 0x166 <DIO_setPinDirection+0x70>
	{
	SET_BIT(DDRB,PinId);	
 150:	27 b3       	in	r18, 0x17	; 23
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_setPinDirection+0x66>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_setPinDirection+0x62>
 160:	82 2b       	or	r24, r18
 162:	87 bb       	out	0x17, r24	; 23
 164:	08 95       	ret
	}else{
	CLR_BIT(DDRB,PinId);	
 166:	27 b3       	in	r18, 0x17	; 23
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_setPinDirection+0x7c>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_setPinDirection+0x78>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	87 bb       	out	0x17, r24	; 23
 17c:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(1==PinDirection)
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	59 f4       	brne	.+22     	; 0x198 <DIO_setPinDirection+0xa2>
	{
	SET_BIT(DDRC,PinId);	
 182:	24 b3       	in	r18, 0x14	; 20
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_setPinDirection+0x98>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_setPinDirection+0x94>
 192:	82 2b       	or	r24, r18
 194:	84 bb       	out	0x14, r24	; 20
 196:	08 95       	ret
	}else{
	CLR_BIT(DDRC,PinId);	
 198:	24 b3       	in	r18, 0x14	; 20
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_setPinDirection+0xae>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_setPinDirection+0xaa>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	84 bb       	out	0x14, r24	; 20
 1ae:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(1==PinDirection)
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	59 f4       	brne	.+22     	; 0x1ca <DIO_setPinDirection+0xd4>
	{
	SET_BIT(DDRD,PinId);	
 1b4:	21 b3       	in	r18, 0x11	; 17
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_setPinDirection+0xca>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_setPinDirection+0xc6>
 1c4:	82 2b       	or	r24, r18
 1c6:	81 bb       	out	0x11, r24	; 17
 1c8:	08 95       	ret
	}else{
	CLR_BIT(DDRD,PinId);	
 1ca:	21 b3       	in	r18, 0x11	; 17
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_setPinDirection+0xe0>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_setPinDirection+0xdc>
 1da:	80 95       	com	r24
 1dc:	82 23       	and	r24, r18
 1de:	81 bb       	out	0x11, r24	; 17
 1e0:	08 95       	ret

000001e2 <DIO_setPinValue>:
}


void DIO_setPinValue	(u8 PortId,u8 PinId,u8 PinValue)
{
if((PortId<=3)&&(PinId<=7)&&((PinValue==DIO_PIN_LOW)||(PinValue==DIO_PIN_HIGH)))
 1e2:	84 30       	cpi	r24, 0x04	; 4
 1e4:	08 f0       	brcs	.+2      	; 0x1e8 <DIO_setPinValue+0x6>
 1e6:	72 c0       	rjmp	.+228    	; 0x2cc <DIO_setPinValue+0xea>
 1e8:	68 30       	cpi	r22, 0x08	; 8
 1ea:	08 f0       	brcs	.+2      	; 0x1ee <DIO_setPinValue+0xc>
 1ec:	6f c0       	rjmp	.+222    	; 0x2cc <DIO_setPinValue+0xea>
 1ee:	42 30       	cpi	r20, 0x02	; 2
 1f0:	08 f0       	brcs	.+2      	; 0x1f4 <DIO_setPinValue+0x12>
 1f2:	6c c0       	rjmp	.+216    	; 0x2cc <DIO_setPinValue+0xea>
{
switch(PortId)
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	01 f1       	breq	.+64     	; 0x238 <DIO_setPinValue+0x56>
 1f8:	30 f0       	brcs	.+12     	; 0x206 <DIO_setPinValue+0x24>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	b1 f1       	breq	.+108    	; 0x26a <DIO_setPinValue+0x88>
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	09 f4       	brne	.+2      	; 0x204 <DIO_setPinValue+0x22>
 202:	4c c0       	rjmp	.+152    	; 0x29c <DIO_setPinValue+0xba>
 204:	08 95       	ret
{
	case DIO_PORTA:
	if(DIO_PIN_HIGH==PinValue)
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	59 f4       	brne	.+22     	; 0x220 <DIO_setPinValue+0x3e>
	{
	SET_BIT(PORTA,PinId);	
 20a:	2b b3       	in	r18, 0x1b	; 27
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_setPinValue+0x34>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_setPinValue+0x30>
 21a:	82 2b       	or	r24, r18
 21c:	8b bb       	out	0x1b, r24	; 27
 21e:	08 95       	ret
	}else{
	CLR_BIT(PORTA,PinId);	
 220:	2b b3       	in	r18, 0x1b	; 27
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_setPinValue+0x4a>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_setPinValue+0x46>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	8b bb       	out	0x1b, r24	; 27
 236:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(DIO_PIN_HIGH==PinValue)
 238:	41 30       	cpi	r20, 0x01	; 1
 23a:	59 f4       	brne	.+22     	; 0x252 <DIO_setPinValue+0x70>
	{
	SET_BIT(PORTB,PinId);	
 23c:	28 b3       	in	r18, 0x18	; 24
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_setPinValue+0x66>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_setPinValue+0x62>
 24c:	82 2b       	or	r24, r18
 24e:	88 bb       	out	0x18, r24	; 24
 250:	08 95       	ret
	}else{
	CLR_BIT(PORTB,PinId);	
 252:	28 b3       	in	r18, 0x18	; 24
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_setPinValue+0x7c>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_setPinValue+0x78>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	88 bb       	out	0x18, r24	; 24
 268:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(DIO_PIN_HIGH==PinValue)
 26a:	41 30       	cpi	r20, 0x01	; 1
 26c:	59 f4       	brne	.+22     	; 0x284 <DIO_setPinValue+0xa2>
	{
	SET_BIT(PORTC,PinId);	
 26e:	25 b3       	in	r18, 0x15	; 21
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_setPinValue+0x98>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_setPinValue+0x94>
 27e:	82 2b       	or	r24, r18
 280:	85 bb       	out	0x15, r24	; 21
 282:	08 95       	ret
	}else{
	CLR_BIT(PORTC,PinId);	
 284:	25 b3       	in	r18, 0x15	; 21
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_setPinValue+0xae>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_setPinValue+0xaa>
 294:	80 95       	com	r24
 296:	82 23       	and	r24, r18
 298:	85 bb       	out	0x15, r24	; 21
 29a:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(DIO_PIN_HIGH==PinValue)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	59 f4       	brne	.+22     	; 0x2b6 <DIO_setPinValue+0xd4>
	{
	SET_BIT(PORTD,PinId);	
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_setPinValue+0xca>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_setPinValue+0xc6>
 2b0:	82 2b       	or	r24, r18
 2b2:	82 bb       	out	0x12, r24	; 18
 2b4:	08 95       	ret
	}else{
	CLR_BIT(PORTD,PinId);	
 2b6:	22 b3       	in	r18, 0x12	; 18
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_setPinValue+0xe0>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_setPinValue+0xdc>
 2c6:	80 95       	com	r24
 2c8:	82 23       	and	r24, r18
 2ca:	82 bb       	out	0x12, r24	; 18
 2cc:	08 95       	ret

000002ce <main>:
SWITCH_t b1 = AMIT_BUTTON1;
SWITCH_t b2 = AMIT_BUTTON2;
RELAY_t RELAY = AMIT_RELAY;
int main(void)
{
DCM_init();
 2ce:	0e 94 49 00 	call	0x92	; 0x92 <DCM_init>
DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	63 e0       	ldi	r22, 0x03	; 3
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_setPinDirection>
TMR_timer0init();
 2dc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <TMR_timer0init>
TMR_timer0start();
 2e0:	0e 94 df 01 	call	0x3be	; 0x3be <TMR_timer0start>
RELAY_on(&RELAY);
 2e4:	80 e6       	ldi	r24, 0x60	; 96
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 ae 01 	call	0x35c	; 0x35c <RELAY_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	2f ef       	ldi	r18, 0xFF	; 255
 2ee:	85 ea       	ldi	r24, 0xA5	; 165
 2f0:	9e e0       	ldi	r25, 0x0E	; 14
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	90 40       	sbci	r25, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x24>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x2e>
 2fc:	00 00       	nop
	_delay_ms(300);

    while (1) 
    {
RELAY_on(&RELAY);
 2fe:	80 e6       	ldi	r24, 0x60	; 96
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 ae 01 	call	0x35c	; 0x35c <RELAY_on>

DCM_setSpeedRatio(90);
 306:	6a e5       	ldi	r22, 0x5A	; 90
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 68 00 	call	0xd0	; 0xd0 <DCM_setSpeedRatio>
 312:	2f ef       	ldi	r18, 0xFF	; 255
 314:	87 ea       	ldi	r24, 0xA7	; 167
 316:	91 e6       	ldi	r25, 0x61	; 97
 318:	21 50       	subi	r18, 0x01	; 1
 31a:	80 40       	sbci	r24, 0x00	; 0
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	e1 f7       	brne	.-8      	; 0x318 <main+0x4a>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0x54>
 322:	00 00       	nop
_delay_ms(2000);
DCM_setSpeedRatio(0);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	cb 01       	movw	r24, r22
 32a:	0e 94 68 00 	call	0xd0	; 0xd0 <DCM_setSpeedRatio>
 32e:	2f ef       	ldi	r18, 0xFF	; 255
 330:	8f e0       	ldi	r24, 0x0F	; 15
 332:	97 e2       	ldi	r25, 0x27	; 39
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x66>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x70>
 33e:	00 00       	nop
_delay_ms(800);
RELAY_off(&RELAY);
 340:	80 e6       	ldi	r24, 0x60	; 96
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 c0 01 	call	0x380	; 0x380 <RELAY_off>
 348:	2f ef       	ldi	r18, 0xFF	; 255
 34a:	87 e8       	ldi	r24, 0x87	; 135
 34c:	93 e1       	ldi	r25, 0x13	; 19
 34e:	21 50       	subi	r18, 0x01	; 1
 350:	80 40       	sbci	r24, 0x00	; 0
 352:	90 40       	sbci	r25, 0x00	; 0
 354:	e1 f7       	brne	.-8      	; 0x34e <main+0x80>
 356:	00 c0       	rjmp	.+0      	; 0x358 <main+0x8a>
 358:	00 00       	nop
 35a:	d1 cf       	rjmp	.-94     	; 0x2fe <main+0x30>

0000035c <RELAY_on>:
/* HAL */
#include "RELAY_interface.h"


void RELAY_on(RELAY_t* relayData)
{
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
if(relayData!=NULL)
 360:	00 97       	sbiw	r24, 0x00	; 0
 362:	59 f0       	breq	.+22     	; 0x37a <RELAY_on+0x1e>
 364:	ec 01       	movw	r28, r24
{
DIO_setPinDirection(relayData->PortId,relayData->PinId,DIO_PIN_OUTPUT);
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	69 81       	ldd	r22, Y+1	; 0x01
 36a:	88 81       	ld	r24, Y
 36c:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_setPinDirection>
DIO_setPinValue(relayData->PortId,relayData->PinId,DIO_PIN_HIGH);
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	69 81       	ldd	r22, Y+1	; 0x01
 374:	88 81       	ld	r24, Y
 376:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_setPinValue>
	
}
}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <RELAY_off>:

void RELAY_off(RELAY_t* relayData)
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
if(relayData!=NULL)
 384:	00 97       	sbiw	r24, 0x00	; 0
 386:	59 f0       	breq	.+22     	; 0x39e <RELAY_off+0x1e>
 388:	ec 01       	movw	r28, r24
{
DIO_setPinDirection(relayData->PortId,relayData->PinId,DIO_PIN_OUTPUT);
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	69 81       	ldd	r22, Y+1	; 0x01
 38e:	88 81       	ld	r24, Y
 390:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_setPinDirection>
DIO_setPinValue(relayData->PortId,relayData->PinId,DIO_PIN_LOW);
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	69 81       	ldd	r22, Y+1	; 0x01
 398:	88 81       	ld	r24, Y
 39a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_setPinValue>
	
}

 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <TMR_timer0init>:

void TMR_timer0_CTC_SetCallBack(void(*ptr)(void))
{
if (ptr!=NULL)
{
	TMR_timer0_CTC_pCallBack=ptr;
 3a4:	83 b7       	in	r24, 0x33	; 51
 3a6:	88 60       	ori	r24, 0x08	; 8
 3a8:	83 bf       	out	0x33, r24	; 51
 3aa:	83 b7       	in	r24, 0x33	; 51
 3ac:	80 64       	ori	r24, 0x40	; 64
 3ae:	83 bf       	out	0x33, r24	; 51
 3b0:	83 b7       	in	r24, 0x33	; 51
 3b2:	80 62       	ori	r24, 0x20	; 32
 3b4:	83 bf       	out	0x33, r24	; 51
 3b6:	83 b7       	in	r24, 0x33	; 51
 3b8:	8f 7e       	andi	r24, 0xEF	; 239
 3ba:	83 bf       	out	0x33, r24	; 51
 3bc:	08 95       	ret

000003be <TMR_timer0start>:
 3be:	83 b7       	in	r24, 0x33	; 51
 3c0:	81 60       	ori	r24, 0x01	; 1
 3c2:	83 bf       	out	0x33, r24	; 51
 3c4:	83 b7       	in	r24, 0x33	; 51
 3c6:	82 60       	ori	r24, 0x02	; 2
 3c8:	83 bf       	out	0x33, r24	; 51
 3ca:	83 b7       	in	r24, 0x33	; 51
 3cc:	8b 7f       	andi	r24, 0xFB	; 251
 3ce:	83 bf       	out	0x33, r24	; 51
 3d0:	08 95       	ret

000003d2 <TMR_timer0SetCompareMatchValue>:
 3d2:	8c bf       	out	0x3c, r24	; 60
 3d4:	08 95       	ret

000003d6 <__vector_11>:


// ISR Function Prototype for Timer0 OVF
void __vector_11(void) __attribute__ ((signal));
void __vector_11(void)
{
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	2f 93       	push	r18
 3e2:	3f 93       	push	r19
 3e4:	4f 93       	push	r20
 3e6:	5f 93       	push	r21
 3e8:	6f 93       	push	r22
 3ea:	7f 93       	push	r23
 3ec:	8f 93       	push	r24
 3ee:	9f 93       	push	r25
 3f0:	af 93       	push	r26
 3f2:	bf 93       	push	r27
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
static u16 counterOVF=0;
counterOVF++;
 3f8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counterOVF.1617>
 3fc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <counterOVF.1617+0x1>
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <counterOVF.1617+0x1>
 406:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <counterOVF.1617>
if (TMR_TMR0_OVF_COUNTER == counterOVF)
 40a:	81 3d       	cpi	r24, 0xD1	; 209
 40c:	93 40       	sbci	r25, 0x03	; 3
 40e:	69 f4       	brne	.+26     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
{
//Set Preload value
TCNT0 = TMR_TMR0_PRELOAD_VALUE;
 410:	80 e7       	ldi	r24, 0x70	; 112
 412:	82 bf       	out	0x32, r24	; 50

//reset counter 
counterOVF =0;	
 414:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <counterOVF.1617+0x1>
 418:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counterOVF.1617>

	//call action
if (TMR_timer0_OVF_pCallBack!=NULL)
 41c:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TMR_timer0_OVF_pCallBack>
 420:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TMR_timer0_OVF_pCallBack+0x1>
 424:	30 97       	sbiw	r30, 0x00	; 0
 426:	09 f0       	breq	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
{
	TMR_timer0_OVF_pCallBack();
 428:	09 95       	icall
}

}
}
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	bf 91       	pop	r27
 430:	af 91       	pop	r26
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	7f 91       	pop	r23
 438:	6f 91       	pop	r22
 43a:	5f 91       	pop	r21
 43c:	4f 91       	pop	r20
 43e:	3f 91       	pop	r19
 440:	2f 91       	pop	r18
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <__vector_10>:


// ISR Function Prototype for Timer0 CTC
void __vector_10(void) __attribute__ ((signal));
void __vector_10(void)
{
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
static u16 counterCTC= 0;
counterCTC++;
 46e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 472:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 47c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
if (TMR_TMR0_CTC_COUNTER == counterCTC)
 480:	85 3c       	cpi	r24, 0xC5	; 197
 482:	93 40       	sbci	r25, 0x03	; 3
 484:	59 f4       	brne	.+22     	; 0x49c <__vector_10+0x50>
{
	//reset counter
	counterCTC =0;
 486:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 48a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>


if (TMR_timer0_CTC_pCallBack!=NULL)
 48e:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TMR_timer0_CTC_pCallBack>
 492:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TMR_timer0_CTC_pCallBack+0x1>
 496:	30 97       	sbiw	r30, 0x00	; 0
 498:	09 f0       	breq	.+2      	; 0x49c <__vector_10+0x50>
{			   
	TMR_timer0_CTC_pCallBack();
 49a:	09 95       	icall
}

}
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__udivmodsi4>:
 4be:	a1 e2       	ldi	r26, 0x21	; 33
 4c0:	1a 2e       	mov	r1, r26
 4c2:	aa 1b       	sub	r26, r26
 4c4:	bb 1b       	sub	r27, r27
 4c6:	fd 01       	movw	r30, r26
 4c8:	0d c0       	rjmp	.+26     	; 0x4e4 <__udivmodsi4_ep>

000004ca <__udivmodsi4_loop>:
 4ca:	aa 1f       	adc	r26, r26
 4cc:	bb 1f       	adc	r27, r27
 4ce:	ee 1f       	adc	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	a2 17       	cp	r26, r18
 4d4:	b3 07       	cpc	r27, r19
 4d6:	e4 07       	cpc	r30, r20
 4d8:	f5 07       	cpc	r31, r21
 4da:	20 f0       	brcs	.+8      	; 0x4e4 <__udivmodsi4_ep>
 4dc:	a2 1b       	sub	r26, r18
 4de:	b3 0b       	sbc	r27, r19
 4e0:	e4 0b       	sbc	r30, r20
 4e2:	f5 0b       	sbc	r31, r21

000004e4 <__udivmodsi4_ep>:
 4e4:	66 1f       	adc	r22, r22
 4e6:	77 1f       	adc	r23, r23
 4e8:	88 1f       	adc	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	1a 94       	dec	r1
 4ee:	69 f7       	brne	.-38     	; 0x4ca <__udivmodsi4_loop>
 4f0:	60 95       	com	r22
 4f2:	70 95       	com	r23
 4f4:	80 95       	com	r24
 4f6:	90 95       	com	r25
 4f8:	9b 01       	movw	r18, r22
 4fa:	ac 01       	movw	r20, r24
 4fc:	bd 01       	movw	r22, r26
 4fe:	cf 01       	movw	r24, r30
 500:	08 95       	ret

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>
