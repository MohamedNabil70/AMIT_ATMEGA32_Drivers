
TMR_timer0_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000008ae  00000942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080006a  0080006a  0000094c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000097c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bba  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1d  00000000  00000000  00002722  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef3  00000000  00000000  0000313f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00004034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d3  00000000  00000000  000043f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f63  00000000  00000000  00004acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00005a2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__vector_10>
  2c:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 03 	call	0x6b0	; 0x6b0 <main>
  8a:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPinDirection>:
	case DIO_PORTD:
	if(DIO_PIN_HIGH==GET_BIT(PIND,PinId))
	{
	*PinValue = DIO_PIN_HIGH;
	}else{
		*PinValue = DIO_PIN_LOW;
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_setPinDirection+0x6>
  96:	72 c0       	rjmp	.+228    	; 0x17c <DIO_setPinDirection+0xea>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_setPinDirection+0xc>
  9c:	6f c0       	rjmp	.+222    	; 0x17c <DIO_setPinDirection+0xea>
  9e:	42 30       	cpi	r20, 0x02	; 2
  a0:	08 f0       	brcs	.+2      	; 0xa4 <DIO_setPinDirection+0x12>
  a2:	6c c0       	rjmp	.+216    	; 0x17c <DIO_setPinDirection+0xea>
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	01 f1       	breq	.+64     	; 0xe8 <DIO_setPinDirection+0x56>
  a8:	30 f0       	brcs	.+12     	; 0xb6 <DIO_setPinDirection+0x24>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	b1 f1       	breq	.+108    	; 0x11a <DIO_setPinDirection+0x88>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	09 f4       	brne	.+2      	; 0xb4 <DIO_setPinDirection+0x22>
  b2:	4c c0       	rjmp	.+152    	; 0x14c <DIO_setPinDirection+0xba>
  b4:	08 95       	ret
  b6:	41 30       	cpi	r20, 0x01	; 1
  b8:	59 f4       	brne	.+22     	; 0xd0 <DIO_setPinDirection+0x3e>
  ba:	2a b3       	in	r18, 0x1a	; 26
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_setPinDirection+0x34>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_setPinDirection+0x30>
  ca:	82 2b       	or	r24, r18
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	08 95       	ret
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_setPinDirection+0x4a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_setPinDirection+0x46>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	08 95       	ret
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	59 f4       	brne	.+22     	; 0x102 <DIO_setPinDirection+0x70>
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_setPinDirection+0x66>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_setPinDirection+0x62>
  fc:	82 2b       	or	r24, r18
  fe:	87 bb       	out	0x17, r24	; 23
 100:	08 95       	ret
 102:	27 b3       	in	r18, 0x17	; 23
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_setPinDirection+0x7c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_setPinDirection+0x78>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	87 bb       	out	0x17, r24	; 23
 118:	08 95       	ret
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	59 f4       	brne	.+22     	; 0x134 <DIO_setPinDirection+0xa2>
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_setPinDirection+0x98>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_setPinDirection+0x94>
 12e:	82 2b       	or	r24, r18
 130:	84 bb       	out	0x14, r24	; 20
 132:	08 95       	ret
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_setPinDirection+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_setPinDirection+0xaa>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	59 f4       	brne	.+22     	; 0x166 <DIO_setPinDirection+0xd4>
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_setPinDirection+0xca>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_setPinDirection+0xc6>
 160:	82 2b       	or	r24, r18
 162:	81 bb       	out	0x11, r24	; 17
 164:	08 95       	ret
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_setPinDirection+0xe0>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_setPinDirection+0xdc>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret

0000017e <DIO_setPinValue>:
 17e:	84 30       	cpi	r24, 0x04	; 4
 180:	08 f0       	brcs	.+2      	; 0x184 <DIO_setPinValue+0x6>
 182:	72 c0       	rjmp	.+228    	; 0x268 <DIO_setPinValue+0xea>
 184:	68 30       	cpi	r22, 0x08	; 8
 186:	08 f0       	brcs	.+2      	; 0x18a <DIO_setPinValue+0xc>
 188:	6f c0       	rjmp	.+222    	; 0x268 <DIO_setPinValue+0xea>
 18a:	42 30       	cpi	r20, 0x02	; 2
 18c:	08 f0       	brcs	.+2      	; 0x190 <DIO_setPinValue+0x12>
 18e:	6c c0       	rjmp	.+216    	; 0x268 <DIO_setPinValue+0xea>
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	01 f1       	breq	.+64     	; 0x1d4 <DIO_setPinValue+0x56>
 194:	30 f0       	brcs	.+12     	; 0x1a2 <DIO_setPinValue+0x24>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	b1 f1       	breq	.+108    	; 0x206 <DIO_setPinValue+0x88>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	09 f4       	brne	.+2      	; 0x1a0 <DIO_setPinValue+0x22>
 19e:	4c c0       	rjmp	.+152    	; 0x238 <DIO_setPinValue+0xba>
 1a0:	08 95       	ret
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	59 f4       	brne	.+22     	; 0x1bc <DIO_setPinValue+0x3e>
 1a6:	2b b3       	in	r18, 0x1b	; 27
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_setPinValue+0x34>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_setPinValue+0x30>
 1b6:	82 2b       	or	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
 1bc:	2b b3       	in	r18, 0x1b	; 27
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_setPinValue+0x4a>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_setPinValue+0x46>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	08 95       	ret
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	59 f4       	brne	.+22     	; 0x1ee <DIO_setPinValue+0x70>
 1d8:	28 b3       	in	r18, 0x18	; 24
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_setPinValue+0x66>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_setPinValue+0x62>
 1e8:	82 2b       	or	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
 1ee:	28 b3       	in	r18, 0x18	; 24
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_setPinValue+0x7c>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_setPinValue+0x78>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	88 bb       	out	0x18, r24	; 24
 204:	08 95       	ret
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	59 f4       	brne	.+22     	; 0x220 <DIO_setPinValue+0xa2>
 20a:	25 b3       	in	r18, 0x15	; 21
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_setPinValue+0x98>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_setPinValue+0x94>
 21a:	82 2b       	or	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
 220:	25 b3       	in	r18, 0x15	; 21
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_setPinValue+0xae>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_setPinValue+0xaa>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	85 bb       	out	0x15, r24	; 21
 236:	08 95       	ret
 238:	41 30       	cpi	r20, 0x01	; 1
 23a:	59 f4       	brne	.+22     	; 0x252 <DIO_setPinValue+0xd4>
 23c:	22 b3       	in	r18, 0x12	; 18
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_setPinValue+0xca>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_setPinValue+0xc6>
 24c:	82 2b       	or	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret
 252:	22 b3       	in	r18, 0x12	; 18
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_setPinValue+0xe0>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_setPinValue+0xdc>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	82 bb       	out	0x12, r24	; 18
 268:	08 95       	ret

0000026a <DIO_togglePinValue>:
}		
}

void DIO_togglePinValue	(u8 PortId,u8 PinId)
{
if((PortId<=3)&&(PinId<=7))
 26a:	84 30       	cpi	r24, 0x04	; 4
 26c:	a8 f5       	brcc	.+106    	; 0x2d8 <DIO_togglePinValue+0x6e>
 26e:	68 30       	cpi	r22, 0x08	; 8
 270:	98 f5       	brcc	.+102    	; 0x2d8 <DIO_togglePinValue+0x6e>
{
switch(PortId)
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	89 f0       	breq	.+34     	; 0x298 <DIO_togglePinValue+0x2e>
 276:	28 f0       	brcs	.+10     	; 0x282 <DIO_togglePinValue+0x18>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	c9 f0       	breq	.+50     	; 0x2ae <DIO_togglePinValue+0x44>
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	11 f1       	breq	.+68     	; 0x2c4 <DIO_togglePinValue+0x5a>
 280:	08 95       	ret
{
	case DIO_PORTA:
	TOG_BIT(PORTA,PinId);
 282:	2b b3       	in	r18, 0x1b	; 27
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_togglePinValue+0x24>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_togglePinValue+0x20>
 292:	82 27       	eor	r24, r18
 294:	8b bb       	out	0x1b, r24	; 27
	break;
 296:	08 95       	ret
	
	case DIO_PORTB:
	TOG_BIT(PORTB,PinId);
 298:	28 b3       	in	r18, 0x18	; 24
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_togglePinValue+0x3a>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_togglePinValue+0x36>
 2a8:	82 27       	eor	r24, r18
 2aa:	88 bb       	out	0x18, r24	; 24
	break;
 2ac:	08 95       	ret
		
	case DIO_PORTC:
	TOG_BIT(PORTC,PinId);
 2ae:	25 b3       	in	r18, 0x15	; 21
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_togglePinValue+0x50>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_togglePinValue+0x4c>
 2be:	82 27       	eor	r24, r18
 2c0:	85 bb       	out	0x15, r24	; 21
	break;	
 2c2:	08 95       	ret
	case DIO_PORTD:
	TOG_BIT(PORTD,PinId);	
 2c4:	22 b3       	in	r18, 0x12	; 18
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_togglePinValue+0x66>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_togglePinValue+0x62>
 2d4:	82 27       	eor	r24, r18
 2d6:	82 bb       	out	0x12, r24	; 18
 2d8:	08 95       	ret

000002da <GI_enable>:
	/* MCAL */
	#include "GI_Interface.h"
	
	void GI_enable(void)
	{
	SET_BIT(SREG,7); //Enable global interrupt
 2da:	8f b7       	in	r24, 0x3f	; 63
 2dc:	80 68       	ori	r24, 0x80	; 128
 2de:	8f bf       	out	0x3f, r24	; 63
 2e0:	08 95       	ret

000002e2 <writeHalfPort>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	cf 93       	push	r28
 2e4:	c8 2f       	mov	r28, r24
 2e6:	80 ff       	sbrs	r24, 0
 2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <writeHalfPort+0x14>
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	64 e0       	ldi	r22, 0x04	; 4
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <writeHalfPort+0x1e>
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	64 e0       	ldi	r22, 0x04	; 4
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 300:	c1 ff       	sbrs	r28, 1
 302:	06 c0       	rjmp	.+12     	; 0x310 <writeHalfPort+0x2e>
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	65 e0       	ldi	r22, 0x05	; 5
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 30e:	05 c0       	rjmp	.+10     	; 0x31a <writeHalfPort+0x38>
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	65 e0       	ldi	r22, 0x05	; 5
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 31a:	c2 ff       	sbrs	r28, 2
 31c:	06 c0       	rjmp	.+12     	; 0x32a <writeHalfPort+0x48>
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	66 e0       	ldi	r22, 0x06	; 6
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 328:	05 c0       	rjmp	.+10     	; 0x334 <writeHalfPort+0x52>
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	66 e0       	ldi	r22, 0x06	; 6
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 334:	c3 ff       	sbrs	r28, 3
 336:	06 c0       	rjmp	.+12     	; 0x344 <writeHalfPort+0x62>
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	67 e0       	ldi	r22, 0x07	; 7
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 342:	05 c0       	rjmp	.+10     	; 0x34e <writeHalfPort+0x6c>
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	67 e0       	ldi	r22, 0x07	; 7
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <LCD_sendCmnd>:
 352:	cf 93       	push	r28
 354:	c8 2f       	mov	r28, r24
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	62 e0       	ldi	r22, 0x02	; 2
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 36a:	8c 2f       	mov	r24, r28
 36c:	82 95       	swap	r24
 36e:	8f 70       	andi	r24, 0x0F	; 15
 370:	0e 94 71 01 	call	0x2e2	; 0x2e2 <writeHalfPort>
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	63 e0       	ldi	r22, 0x03	; 3
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 37e:	8f e9       	ldi	r24, 0x9F	; 159
 380:	9f e0       	ldi	r25, 0x0F	; 15
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_sendCmnd+0x30>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_sendCmnd+0x36>
 388:	00 00       	nop
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	63 e0       	ldi	r22, 0x03	; 3
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 394:	8c 2f       	mov	r24, r28
 396:	0e 94 71 01 	call	0x2e2	; 0x2e2 <writeHalfPort>
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	63 e0       	ldi	r22, 0x03	; 3
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 3a4:	8f e9       	ldi	r24, 0x9F	; 159
 3a6:	9f e0       	ldi	r25, 0x0F	; 15
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCD_sendCmnd+0x56>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCD_sendCmnd+0x5c>
 3ae:	00 00       	nop
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	63 e0       	ldi	r22, 0x03	; 3
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <LCD_init>:
 3be:	2f e7       	ldi	r18, 0x7F	; 127
 3c0:	85 eb       	ldi	r24, 0xB5	; 181
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	21 50       	subi	r18, 0x01	; 1
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <LCD_init+0x6>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <LCD_init+0x10>
 3ce:	00 00       	nop
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <writeHalfPort>
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	63 e0       	ldi	r22, 0x03	; 3
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 3f4:	8f e9       	ldi	r24, 0x9F	; 159
 3f6:	9f e0       	ldi	r25, 0x0F	; 15
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_init+0x3a>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_init+0x40>
 3fe:	00 00       	nop
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	63 e0       	ldi	r22, 0x03	; 3
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 40a:	88 e2       	ldi	r24, 0x28	; 40
 40c:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCmnd>
 410:	90 ef       	ldi	r25, 0xF0	; 240
 412:	9a 95       	dec	r25
 414:	f1 f7       	brne	.-4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 416:	8f e0       	ldi	r24, 0x0F	; 15
 418:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCmnd>
 41c:	20 ef       	ldi	r18, 0xF0	; 240
 41e:	2a 95       	dec	r18
 420:	f1 f7       	brne	.-4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCmnd>
 428:	8f e3       	ldi	r24, 0x3F	; 63
 42a:	9f e1       	ldi	r25, 0x1F	; 31
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	86 e0       	ldi	r24, 0x06	; 6
 436:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCmnd>
 43a:	08 95       	ret

0000043c <LCD_sendChar>:
 43c:	cf 93       	push	r28
 43e:	c8 2f       	mov	r28, r24
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 44a:	40 e0       	ldi	r20, 0x00	; 0
 44c:	62 e0       	ldi	r22, 0x02	; 2
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 454:	8c 2f       	mov	r24, r28
 456:	82 95       	swap	r24
 458:	8f 70       	andi	r24, 0x0F	; 15
 45a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <writeHalfPort>
 45e:	41 e0       	ldi	r20, 0x01	; 1
 460:	63 e0       	ldi	r22, 0x03	; 3
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 468:	8f e9       	ldi	r24, 0x9F	; 159
 46a:	9f e0       	ldi	r25, 0x0F	; 15
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <LCD_sendChar+0x30>
 470:	00 c0       	rjmp	.+0      	; 0x472 <LCD_sendChar+0x36>
 472:	00 00       	nop
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	63 e0       	ldi	r22, 0x03	; 3
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 47e:	8c 2f       	mov	r24, r28
 480:	0e 94 71 01 	call	0x2e2	; 0x2e2 <writeHalfPort>
 484:	41 e0       	ldi	r20, 0x01	; 1
 486:	63 e0       	ldi	r22, 0x03	; 3
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 48e:	8f e9       	ldi	r24, 0x9F	; 159
 490:	9f e0       	ldi	r25, 0x0F	; 15
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <LCD_sendChar+0x56>
 496:	00 c0       	rjmp	.+0      	; 0x498 <LCD_sendChar+0x5c>
 498:	00 00       	nop
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	63 e0       	ldi	r22, 0x03	; 3
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <LCD_sendString>:
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	00 97       	sbiw	r24, 0x00	; 0
 4b0:	29 f4       	brne	.+10     	; 0x4bc <LCD_sendString+0x14>
 4b2:	0c c0       	rjmp	.+24     	; 0x4cc <LCD_sendString+0x24>
 4b4:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_sendChar>
 4b8:	cf 5f       	subi	r28, 0xFF	; 255
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <LCD_sendString+0x18>
 4bc:	8c 01       	movw	r16, r24
 4be:	c0 e0       	ldi	r28, 0x00	; 0
 4c0:	f8 01       	movw	r30, r16
 4c2:	ec 0f       	add	r30, r28
 4c4:	f1 1d       	adc	r31, r1
 4c6:	80 81       	ld	r24, Z
 4c8:	81 11       	cpse	r24, r1
 4ca:	f4 cf       	rjmp	.-24     	; 0x4b4 <LCD_sendString+0xc>
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	08 95       	ret

000004d4 <LCD_writeNumber>:
 4d4:	cf 92       	push	r12
 4d6:	df 92       	push	r13
 4d8:	ef 92       	push	r14
 4da:	ff 92       	push	r15
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	8b 01       	movw	r16, r22
 4e2:	9c 01       	movw	r18, r24
 4e4:	67 2b       	or	r22, r23
 4e6:	68 2b       	or	r22, r24
 4e8:	69 2b       	or	r22, r25
 4ea:	49 f5       	brne	.+82     	; 0x53e <LCD_writeNumber+0x6a>
 4ec:	80 e3       	ldi	r24, 0x30	; 48
 4ee:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_sendChar>
 4f2:	45 c0       	rjmp	.+138    	; 0x57e <LCD_writeNumber+0xaa>
 4f4:	dc 01       	movw	r26, r24
 4f6:	cb 01       	movw	r24, r22
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	aa 1f       	adc	r26, r26
 4fe:	bb 1f       	adc	r27, r27
 500:	6c 01       	movw	r12, r24
 502:	7d 01       	movw	r14, r26
 504:	cc 0c       	add	r12, r12
 506:	dd 1c       	adc	r13, r13
 508:	ee 1c       	adc	r14, r14
 50a:	ff 1c       	adc	r15, r15
 50c:	cc 0c       	add	r12, r12
 50e:	dd 1c       	adc	r13, r13
 510:	ee 1c       	adc	r14, r14
 512:	ff 1c       	adc	r15, r15
 514:	c8 0e       	add	r12, r24
 516:	d9 1e       	adc	r13, r25
 518:	ea 1e       	adc	r14, r26
 51a:	fb 1e       	adc	r15, r27
 51c:	c9 01       	movw	r24, r18
 51e:	b8 01       	movw	r22, r16
 520:	2a e0       	ldi	r18, 0x0A	; 10
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	40 e0       	ldi	r20, 0x00	; 0
 526:	50 e0       	ldi	r21, 0x00	; 0
 528:	0e 94 33 04 	call	0x866	; 0x866 <__udivmodsi4>
 52c:	6c 0d       	add	r22, r12
 52e:	7d 1d       	adc	r23, r13
 530:	8e 1d       	adc	r24, r14
 532:	9f 1d       	adc	r25, r15
 534:	02 2f       	mov	r16, r18
 536:	13 2f       	mov	r17, r19
 538:	24 2f       	mov	r18, r20
 53a:	35 2f       	mov	r19, r21
 53c:	04 c0       	rjmp	.+8      	; 0x546 <LCD_writeNumber+0x72>
 53e:	61 e0       	ldi	r22, 0x01	; 1
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	01 15       	cp	r16, r1
 548:	11 05       	cpc	r17, r1
 54a:	21 05       	cpc	r18, r1
 54c:	31 05       	cpc	r19, r1
 54e:	91 f6       	brne	.-92     	; 0x4f4 <LCD_writeNumber+0x20>
 550:	2a e0       	ldi	r18, 0x0A	; 10
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	40 e0       	ldi	r20, 0x00	; 0
 556:	50 e0       	ldi	r21, 0x00	; 0
 558:	0e 94 33 04 	call	0x866	; 0x866 <__udivmodsi4>
 55c:	e2 2e       	mov	r14, r18
 55e:	f3 2e       	mov	r15, r19
 560:	04 2f       	mov	r16, r20
 562:	15 2f       	mov	r17, r21
 564:	80 e3       	ldi	r24, 0x30	; 48
 566:	86 0f       	add	r24, r22
 568:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_sendChar>
 56c:	6e 2d       	mov	r22, r14
 56e:	7f 2d       	mov	r23, r15
 570:	80 2f       	mov	r24, r16
 572:	91 2f       	mov	r25, r17
 574:	61 30       	cpi	r22, 0x01	; 1
 576:	71 05       	cpc	r23, r1
 578:	81 05       	cpc	r24, r1
 57a:	91 05       	cpc	r25, r1
 57c:	49 f7       	brne	.-46     	; 0x550 <LCD_writeNumber+0x7c>
 57e:	1f 91       	pop	r17
 580:	0f 91       	pop	r16
 582:	ff 90       	pop	r15
 584:	ef 90       	pop	r14
 586:	df 90       	pop	r13
 588:	cf 90       	pop	r12
 58a:	08 95       	ret

0000058c <LCD_clear>:
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCmnd>
 592:	8f e3       	ldi	r24, 0x3F	; 63
 594:	9f e1       	ldi	r25, 0x1F	; 31
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	f1 f7       	brne	.-4      	; 0x596 <LCD_clear+0xa>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <LCD_clear+0x10>
 59c:	00 00       	nop
 59e:	08 95       	ret

000005a0 <LCD_goToSpecificPosition>:
	}
}

void LCD_goToSpecificPosition(u8 lineNumber,u8 position)
{
	if(lineNumber == LCD_LINE_ONE)
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	39 f4       	brne	.+14     	; 0x5b2 <LCD_goToSpecificPosition+0x12>
	{
	if (position<16)
 5a4:	60 31       	cpi	r22, 0x10	; 16
 5a6:	68 f4       	brcc	.+26     	; 0x5c2 <LCD_goToSpecificPosition+0x22>
	{
	LCD_sendCmnd(0x80 + position);	
 5a8:	80 e8       	ldi	r24, 0x80	; 128
 5aa:	86 0f       	add	r24, r22
 5ac:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCmnd>
 5b0:	08 95       	ret
	}
		
	}else if (lineNumber == LCD_LINE_TWO){
 5b2:	82 30       	cpi	r24, 0x02	; 2
 5b4:	31 f4       	brne	.+12     	; 0x5c2 <LCD_goToSpecificPosition+0x22>
	if (position<16)
 5b6:	60 31       	cpi	r22, 0x10	; 16
 5b8:	20 f4       	brcc	.+8      	; 0x5c2 <LCD_goToSpecificPosition+0x22>
	{
	LCD_sendCmnd(0xC0 + position);		
 5ba:	80 ec       	ldi	r24, 0xC0	; 192
 5bc:	86 0f       	add	r24, r22
 5be:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_sendCmnd>
 5c2:	08 95       	ret

000005c4 <LED_toggle>:
			DIO_setPinValue(ptr->PortId,ptr->PinId,DIO_PIN_HIGH);
		}
	}	
}
void LED_toggle(LED_t* ptr)
{
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
if((ptr!=NULL) && (ptr->PortId<=3)&&(ptr->PinId<=7))
 5c8:	00 97       	sbiw	r24, 0x00	; 0
 5ca:	81 f0       	breq	.+32     	; 0x5ec <LED_toggle+0x28>
 5cc:	fc 01       	movw	r30, r24
 5ce:	20 81       	ld	r18, Z
 5d0:	24 30       	cpi	r18, 0x04	; 4
 5d2:	60 f4       	brcc	.+24     	; 0x5ec <LED_toggle+0x28>
 5d4:	61 81       	ldd	r22, Z+1	; 0x01
 5d6:	68 30       	cpi	r22, 0x08	; 8
 5d8:	48 f4       	brcc	.+18     	; 0x5ec <LED_toggle+0x28>
 5da:	ec 01       	movw	r28, r24
{
		DIO_setPinDirection(ptr->PortId,ptr->PinId,DIO_PIN_OUTPUT);
 5dc:	41 e0       	ldi	r20, 0x01	; 1
 5de:	82 2f       	mov	r24, r18
 5e0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
		DIO_togglePinValue(ptr->PortId,ptr->PinId);
 5e4:	69 81       	ldd	r22, Y+1	; 0x01
 5e6:	88 81       	ld	r24, Y
 5e8:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_togglePinValue>
}	
	
}
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	08 95       	ret

000005f2 <CTC_func>:



void CTC_func(void){
	static u8 hour,minute,second;
	LCD_clear();
 5f2:	0e 94 c6 02 	call	0x58c	; 0x58c <LCD_clear>
	second++;
 5f6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <second.1828>
 5fa:	8f 5f       	subi	r24, 0xFF	; 255
 5fc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <second.1828>
	if(second==60){
 600:	8c 33       	cpi	r24, 0x3C	; 60
 602:	39 f4       	brne	.+14     	; 0x612 <CTC_func+0x20>
		second=0;
 604:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <second.1828>
		minute++;
 608:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <minute.1827>
 60c:	8f 5f       	subi	r24, 0xFF	; 255
 60e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <minute.1827>
	}
	if(minute==60){
 612:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <minute.1827>
 616:	8c 33       	cpi	r24, 0x3C	; 60
 618:	39 f4       	brne	.+14     	; 0x628 <CTC_func+0x36>
		minute=0;
 61a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <minute.1827>
		hour++;
 61e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 622:	8f 5f       	subi	r24, 0xFF	; 255
 624:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	}
	LCD_sendString((u8*)"Time:");
 628:	83 e6       	ldi	r24, 0x63	; 99
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_sendString>
	LCD_goToSpecificPosition(LCD_LINE_TWO,4);
 630:	64 e0       	ldi	r22, 0x04	; 4
 632:	82 e0       	ldi	r24, 0x02	; 2
 634:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LCD_goToSpecificPosition>
	if(hour<10) LCD_goToSpecificPosition(LCD_LINE_TWO,5);
 638:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 63c:	8a 30       	cpi	r24, 0x0A	; 10
 63e:	20 f4       	brcc	.+8      	; 0x648 <CTC_func+0x56>
 640:	65 e0       	ldi	r22, 0x05	; 5
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LCD_goToSpecificPosition>
	LCD_writeNumber(hour);
 648:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <__data_end>
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_writeNumber>
	LCD_goToSpecificPosition(LCD_LINE_TWO,6);
 656:	66 e0       	ldi	r22, 0x06	; 6
 658:	82 e0       	ldi	r24, 0x02	; 2
 65a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LCD_goToSpecificPosition>
	LCD_sendChar(':');
 65e:	8a e3       	ldi	r24, 0x3A	; 58
 660:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_sendChar>
	if(minute<10) LCD_goToSpecificPosition(LCD_LINE_TWO,8);
 664:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <minute.1827>
 668:	8a 30       	cpi	r24, 0x0A	; 10
 66a:	20 f4       	brcc	.+8      	; 0x674 <CTC_func+0x82>
 66c:	68 e0       	ldi	r22, 0x08	; 8
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LCD_goToSpecificPosition>
	LCD_writeNumber(minute);
 674:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <minute.1827>
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_writeNumber>
	LCD_goToSpecificPosition(LCD_LINE_TWO,9);
 682:	69 e0       	ldi	r22, 0x09	; 9
 684:	82 e0       	ldi	r24, 0x02	; 2
 686:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LCD_goToSpecificPosition>
	LCD_sendChar(':');
 68a:	8a e3       	ldi	r24, 0x3A	; 58
 68c:	0e 94 1e 02 	call	0x43c	; 0x43c <LCD_sendChar>
	if(second<10) LCD_goToSpecificPosition(LCD_LINE_TWO,11);
 690:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <second.1828>
 694:	8a 30       	cpi	r24, 0x0A	; 10
 696:	20 f4       	brcc	.+8      	; 0x6a0 <CTC_func+0xae>
 698:	6b e0       	ldi	r22, 0x0B	; 11
 69a:	82 e0       	ldi	r24, 0x02	; 2
 69c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LCD_goToSpecificPosition>
	LCD_writeNumber(second);
 6a0:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <second.1828>
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_writeNumber>
 6ae:	08 95       	ret

000006b0 <main>:
LED_t LED2=AMIT_LED2;
		
		
int main(void)
{
		DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 6b0:	41 e0       	ldi	r20, 0x01	; 1
 6b2:	61 e0       	ldi	r22, 0x01	; 1
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
		DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 6ba:	41 e0       	ldi	r20, 0x01	; 1
 6bc:	62 e0       	ldi	r22, 0x02	; 2
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
		DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 6c4:	41 e0       	ldi	r20, 0x01	; 1
 6c6:	63 e0       	ldi	r22, 0x03	; 3
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>

		/* Data Pins Direction */
		DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 6ce:	41 e0       	ldi	r20, 0x01	; 1
 6d0:	64 e0       	ldi	r22, 0x04	; 4
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
		DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 6d8:	41 e0       	ldi	r20, 0x01	; 1
 6da:	65 e0       	ldi	r22, 0x05	; 5
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
		DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 6e2:	41 e0       	ldi	r20, 0x01	; 1
 6e4:	66 e0       	ldi	r22, 0x06	; 6
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
		DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 6ec:	41 e0       	ldi	r20, 0x01	; 1
 6ee:	67 e0       	ldi	r22, 0x07	; 7
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>

		DIO_setPinDirection(DIO_PORTA,DIO_PIN3,DIO_PIN_OUTPUT);
 6f6:	41 e0       	ldi	r20, 0x01	; 1
 6f8:	63 e0       	ldi	r22, 0x03	; 3
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
		DIO_setPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);
 700:	41 e0       	ldi	r20, 0x01	; 1
 702:	67 e0       	ldi	r22, 0x07	; 7
 704:	82 e0       	ldi	r24, 0x02	; 2
 706:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>

LCD_init();		
 70a:	0e 94 df 01 	call	0x3be	; 0x3be <LCD_init>
GI_enable();
 70e:	0e 94 6d 01 	call	0x2da	; 0x2da <GI_enable>
TMR_timer0SetCompareMatchValue(250);
 712:	8a ef       	ldi	r24, 0xFA	; 250
 714:	0e 94 b6 03 	call	0x76c	; 0x76c <TMR_timer0SetCompareMatchValue>
TMR_timer0_CTC_SetCallBack(&CTC_func);  
 718:	89 ef       	ldi	r24, 0xF9	; 249
 71a:	92 e0       	ldi	r25, 0x02	; 2
 71c:	0e 94 b8 03 	call	0x770	; 0x770 <TMR_timer0_CTC_SetCallBack>
TMR_timer0init();
 720:	0e 94 a2 03 	call	0x744	; 0x744 <TMR_timer0init>
TMR_timer0start();
 724:	0e 94 ac 03 	call	0x758	; 0x758 <TMR_timer0start>


		
	while (1) 
    {			
LED_toggle(&LED1);
 728:	80 e6       	ldi	r24, 0x60	; 96
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LED_toggle>
 730:	2f e7       	ldi	r18, 0x7F	; 127
 732:	8e e1       	ldi	r24, 0x1E	; 30
 734:	9f e2       	ldi	r25, 0x2F	; 47
 736:	21 50       	subi	r18, 0x01	; 1
 738:	80 40       	sbci	r24, 0x00	; 0
 73a:	90 40       	sbci	r25, 0x00	; 0
 73c:	e1 f7       	brne	.-8      	; 0x736 <main+0x86>
 73e:	00 c0       	rjmp	.+0      	; 0x740 <main+0x90>
 740:	00 00       	nop
 742:	f2 cf       	rjmp	.-28     	; 0x728 <main+0x78>

00000744 <TMR_timer0init>:
// TMR0_NORMAL_MODE 
void TMR_timer0_OVF_SetCallBack(void(*ptr)(void))
{
	if (ptr!=NULL)
	{
		TMR_timer0_OVF_pCallBack=ptr;
 744:	83 b7       	in	r24, 0x33	; 51
 746:	88 60       	ori	r24, 0x08	; 8
 748:	83 bf       	out	0x33, r24	; 51
 74a:	83 b7       	in	r24, 0x33	; 51
 74c:	8f 7b       	andi	r24, 0xBF	; 191
 74e:	83 bf       	out	0x33, r24	; 51
 750:	89 b7       	in	r24, 0x39	; 57
 752:	82 60       	ori	r24, 0x02	; 2
 754:	89 bf       	out	0x39, r24	; 57
 756:	08 95       	ret

00000758 <TMR_timer0start>:
 758:	83 b7       	in	r24, 0x33	; 51
 75a:	81 60       	ori	r24, 0x01	; 1
 75c:	83 bf       	out	0x33, r24	; 51
 75e:	83 b7       	in	r24, 0x33	; 51
 760:	82 60       	ori	r24, 0x02	; 2
 762:	83 bf       	out	0x33, r24	; 51
 764:	83 b7       	in	r24, 0x33	; 51
 766:	8b 7f       	andi	r24, 0xFB	; 251
 768:	83 bf       	out	0x33, r24	; 51
 76a:	08 95       	ret

0000076c <TMR_timer0SetCompareMatchValue>:
// TMR0_CTC_MODE

void TMR_timer0SetCompareMatchValue(u8 OCR0_Value )
{
//	init timer HARDWARE with compare value [Output Compare REG]
OCR0 = OCR0_Value;
 76c:	8c bf       	out	0x3c, r24	; 60
 76e:	08 95       	ret

00000770 <TMR_timer0_CTC_SetCallBack>:
}


void TMR_timer0_CTC_SetCallBack(void(*ptr)(void))
{
if (ptr!=NULL)
 770:	00 97       	sbiw	r24, 0x00	; 0
 772:	21 f0       	breq	.+8      	; 0x77c <TMR_timer0_CTC_SetCallBack+0xc>
{
	TMR_timer0_CTC_pCallBack=ptr;
 774:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <TMR_timer0_CTC_pCallBack+0x1>
 778:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <TMR_timer0_CTC_pCallBack>
 77c:	08 95       	ret

0000077e <__vector_11>:


// ISR Function Prototype for Timer0 OVF
void __vector_11(void) __attribute__ ((signal));
void __vector_11(void)
{
 77e:	1f 92       	push	r1
 780:	0f 92       	push	r0
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	0f 92       	push	r0
 786:	11 24       	eor	r1, r1
 788:	2f 93       	push	r18
 78a:	3f 93       	push	r19
 78c:	4f 93       	push	r20
 78e:	5f 93       	push	r21
 790:	6f 93       	push	r22
 792:	7f 93       	push	r23
 794:	8f 93       	push	r24
 796:	9f 93       	push	r25
 798:	af 93       	push	r26
 79a:	bf 93       	push	r27
 79c:	ef 93       	push	r30
 79e:	ff 93       	push	r31
static u16 counterOVF=0;
counterOVF++;
 7a0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <counterOVF.1617>
 7a4:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <counterOVF.1617+0x1>
 7a8:	01 96       	adiw	r24, 0x01	; 1
 7aa:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <counterOVF.1617+0x1>
 7ae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <counterOVF.1617>
if (TMR_TMR0_OVF_COUNTER == counterOVF)
 7b2:	81 3d       	cpi	r24, 0xD1	; 209
 7b4:	93 40       	sbci	r25, 0x03	; 3
 7b6:	69 f4       	brne	.+26     	; 0x7d2 <__vector_11+0x54>
{
//Set Preload value
TCNT0 = TMR_TMR0_PRELOAD_VALUE;
 7b8:	80 e7       	ldi	r24, 0x70	; 112
 7ba:	82 bf       	out	0x32, r24	; 50

//reset counter 
counterOVF =0;	
 7bc:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <counterOVF.1617+0x1>
 7c0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <counterOVF.1617>

	//call action
if (TMR_timer0_OVF_pCallBack!=NULL)
 7c4:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <TMR_timer0_OVF_pCallBack>
 7c8:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <TMR_timer0_OVF_pCallBack+0x1>
 7cc:	30 97       	sbiw	r30, 0x00	; 0
 7ce:	09 f0       	breq	.+2      	; 0x7d2 <__vector_11+0x54>
{
	TMR_timer0_OVF_pCallBack();
 7d0:	09 95       	icall
}

}
}
 7d2:	ff 91       	pop	r31
 7d4:	ef 91       	pop	r30
 7d6:	bf 91       	pop	r27
 7d8:	af 91       	pop	r26
 7da:	9f 91       	pop	r25
 7dc:	8f 91       	pop	r24
 7de:	7f 91       	pop	r23
 7e0:	6f 91       	pop	r22
 7e2:	5f 91       	pop	r21
 7e4:	4f 91       	pop	r20
 7e6:	3f 91       	pop	r19
 7e8:	2f 91       	pop	r18
 7ea:	0f 90       	pop	r0
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	0f 90       	pop	r0
 7f0:	1f 90       	pop	r1
 7f2:	18 95       	reti

000007f4 <__vector_10>:


// ISR Function Prototype for Timer0 CTC
void __vector_10(void) __attribute__ ((signal));
void __vector_10(void)
{
 7f4:	1f 92       	push	r1
 7f6:	0f 92       	push	r0
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	0f 92       	push	r0
 7fc:	11 24       	eor	r1, r1
 7fe:	2f 93       	push	r18
 800:	3f 93       	push	r19
 802:	4f 93       	push	r20
 804:	5f 93       	push	r21
 806:	6f 93       	push	r22
 808:	7f 93       	push	r23
 80a:	8f 93       	push	r24
 80c:	9f 93       	push	r25
 80e:	af 93       	push	r26
 810:	bf 93       	push	r27
 812:	ef 93       	push	r30
 814:	ff 93       	push	r31
static u16 counterCTC= 0;
counterCTC++;
 816:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <counterCTC.1623>
 81a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <counterCTC.1623+0x1>
 81e:	01 96       	adiw	r24, 0x01	; 1
 820:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <counterCTC.1623+0x1>
 824:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <counterCTC.1623>
if (TMR_TMR0_CTC_COUNTER == counterCTC)
 828:	85 3c       	cpi	r24, 0xC5	; 197
 82a:	93 40       	sbci	r25, 0x03	; 3
 82c:	59 f4       	brne	.+22     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
{
	//reset counter
	counterCTC =0;
 82e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <counterCTC.1623+0x1>
 832:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <counterCTC.1623>


if (TMR_timer0_CTC_pCallBack!=NULL)
 836:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <TMR_timer0_CTC_pCallBack>
 83a:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <TMR_timer0_CTC_pCallBack+0x1>
 83e:	30 97       	sbiw	r30, 0x00	; 0
 840:	09 f0       	breq	.+2      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
{			   
	TMR_timer0_CTC_pCallBack();
 842:	09 95       	icall
}

}
 844:	ff 91       	pop	r31
 846:	ef 91       	pop	r30
 848:	bf 91       	pop	r27
 84a:	af 91       	pop	r26
 84c:	9f 91       	pop	r25
 84e:	8f 91       	pop	r24
 850:	7f 91       	pop	r23
 852:	6f 91       	pop	r22
 854:	5f 91       	pop	r21
 856:	4f 91       	pop	r20
 858:	3f 91       	pop	r19
 85a:	2f 91       	pop	r18
 85c:	0f 90       	pop	r0
 85e:	0f be       	out	0x3f, r0	; 63
 860:	0f 90       	pop	r0
 862:	1f 90       	pop	r1
 864:	18 95       	reti

00000866 <__udivmodsi4>:
 866:	a1 e2       	ldi	r26, 0x21	; 33
 868:	1a 2e       	mov	r1, r26
 86a:	aa 1b       	sub	r26, r26
 86c:	bb 1b       	sub	r27, r27
 86e:	fd 01       	movw	r30, r26
 870:	0d c0       	rjmp	.+26     	; 0x88c <__udivmodsi4_ep>

00000872 <__udivmodsi4_loop>:
 872:	aa 1f       	adc	r26, r26
 874:	bb 1f       	adc	r27, r27
 876:	ee 1f       	adc	r30, r30
 878:	ff 1f       	adc	r31, r31
 87a:	a2 17       	cp	r26, r18
 87c:	b3 07       	cpc	r27, r19
 87e:	e4 07       	cpc	r30, r20
 880:	f5 07       	cpc	r31, r21
 882:	20 f0       	brcs	.+8      	; 0x88c <__udivmodsi4_ep>
 884:	a2 1b       	sub	r26, r18
 886:	b3 0b       	sbc	r27, r19
 888:	e4 0b       	sbc	r30, r20
 88a:	f5 0b       	sbc	r31, r21

0000088c <__udivmodsi4_ep>:
 88c:	66 1f       	adc	r22, r22
 88e:	77 1f       	adc	r23, r23
 890:	88 1f       	adc	r24, r24
 892:	99 1f       	adc	r25, r25
 894:	1a 94       	dec	r1
 896:	69 f7       	brne	.-38     	; 0x872 <__udivmodsi4_loop>
 898:	60 95       	com	r22
 89a:	70 95       	com	r23
 89c:	80 95       	com	r24
 89e:	90 95       	com	r25
 8a0:	9b 01       	movw	r18, r22
 8a2:	ac 01       	movw	r20, r24
 8a4:	bd 01       	movw	r22, r26
 8a6:	cf 01       	movw	r24, r30
 8a8:	08 95       	ret

000008aa <_exit>:
 8aa:	f8 94       	cli

000008ac <__stop_program>:
 8ac:	ff cf       	rjmp	.-2      	; 0x8ac <__stop_program>
