
PROJECT test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  0000073c  000007b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000834  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000179f  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000832  00000000  00000000  00002107  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b41  00000000  00000000  00002939  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  0000347c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000054a  00000000  00000000  00003660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cab  00000000  00000000  00003baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00004855  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d7 02 	call	0x5ae	; 0x5ae <main>
  7a:	0c 94 9c 03 	jmp	0x738	; 0x738 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_setPinDirection>:


/*Pin Apis*/
void DIO_setPinDirection(u8 PortId,u8 PinId,u8 PinDirection)
{
if((PortId<=3)&&(PinId<=7)&&((PinDirection== DIO_PIN_INPUT)||(PinDirection==DIO_PIN_OUTPUT)))
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_setPinDirection+0x6>
  86:	72 c0       	rjmp	.+228    	; 0x16c <DIO_setPinDirection+0xea>
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_setPinDirection+0xc>
  8c:	6f c0       	rjmp	.+222    	; 0x16c <DIO_setPinDirection+0xea>
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_setPinDirection+0x12>
  92:	6c c0       	rjmp	.+216    	; 0x16c <DIO_setPinDirection+0xea>
{
switch(PortId)
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	01 f1       	breq	.+64     	; 0xd8 <DIO_setPinDirection+0x56>
  98:	30 f0       	brcs	.+12     	; 0xa6 <DIO_setPinDirection+0x24>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	b1 f1       	breq	.+108    	; 0x10a <DIO_setPinDirection+0x88>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_setPinDirection+0x22>
  a2:	4c c0       	rjmp	.+152    	; 0x13c <DIO_setPinDirection+0xba>
  a4:	08 95       	ret
{
	case DIO_PORTA:
	if(1==PinDirection)
  a6:	41 30       	cpi	r20, 0x01	; 1
  a8:	59 f4       	brne	.+22     	; 0xc0 <DIO_setPinDirection+0x3e>
	{
	SET_BIT(DDRA,PinId);	
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x34>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x30>
  ba:	82 2b       	or	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
	}else{
	CLR_BIT(DDRA,PinId);	
  c0:	2a b3       	in	r18, 0x1a	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_setPinDirection+0x4a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_setPinDirection+0x46>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(1==PinDirection)
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	59 f4       	brne	.+22     	; 0xf2 <DIO_setPinDirection+0x70>
	{
	SET_BIT(DDRB,PinId);	
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x66>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x62>
  ec:	82 2b       	or	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
	}else{
	CLR_BIT(DDRB,PinId);	
  f2:	27 b3       	in	r18, 0x17	; 23
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_setPinDirection+0x7c>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_setPinDirection+0x78>
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	87 bb       	out	0x17, r24	; 23
 108:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(1==PinDirection)
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	59 f4       	brne	.+22     	; 0x124 <DIO_setPinDirection+0xa2>
	{
	SET_BIT(DDRC,PinId);	
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0x98>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0x94>
 11e:	82 2b       	or	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
	}else{
	CLR_BIT(DDRC,PinId);	
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_setPinDirection+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_setPinDirection+0xaa>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	84 bb       	out	0x14, r24	; 20
 13a:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(1==PinDirection)
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	59 f4       	brne	.+22     	; 0x156 <DIO_setPinDirection+0xd4>
	{
	SET_BIT(DDRD,PinId);	
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xc6>
 150:	82 2b       	or	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret
	}else{
	CLR_BIT(DDRD,PinId);	
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDirection+0xe0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDirection+0xdc>
 166:	80 95       	com	r24
 168:	82 23       	and	r24, r18
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	08 95       	ret

0000016e <DIO_setPinValue>:
}


void DIO_setPinValue	(u8 PortId,u8 PinId,u8 PinValue)
{
if((PortId<=3)&&(PinId<=7)&&((PinValue==DIO_PIN_LOW)||(PinValue==DIO_PIN_HIGH)))
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_setPinValue+0x6>
 172:	72 c0       	rjmp	.+228    	; 0x258 <DIO_setPinValue+0xea>
 174:	68 30       	cpi	r22, 0x08	; 8
 176:	08 f0       	brcs	.+2      	; 0x17a <DIO_setPinValue+0xc>
 178:	6f c0       	rjmp	.+222    	; 0x258 <DIO_setPinValue+0xea>
 17a:	42 30       	cpi	r20, 0x02	; 2
 17c:	08 f0       	brcs	.+2      	; 0x180 <DIO_setPinValue+0x12>
 17e:	6c c0       	rjmp	.+216    	; 0x258 <DIO_setPinValue+0xea>
{
switch(PortId)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	01 f1       	breq	.+64     	; 0x1c4 <DIO_setPinValue+0x56>
 184:	30 f0       	brcs	.+12     	; 0x192 <DIO_setPinValue+0x24>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	b1 f1       	breq	.+108    	; 0x1f6 <DIO_setPinValue+0x88>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	09 f4       	brne	.+2      	; 0x190 <DIO_setPinValue+0x22>
 18e:	4c c0       	rjmp	.+152    	; 0x228 <DIO_setPinValue+0xba>
 190:	08 95       	ret
{
	case DIO_PORTA:
	if(DIO_PIN_HIGH==PinValue)
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	59 f4       	brne	.+22     	; 0x1ac <DIO_setPinValue+0x3e>
	{
	SET_BIT(PORTA,PinId);	
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinValue+0x34>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinValue+0x30>
 1a6:	82 2b       	or	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
	}else{
	CLR_BIT(PORTA,PinId);	
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_setPinValue+0x4a>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_setPinValue+0x46>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(DIO_PIN_HIGH==PinValue)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	59 f4       	brne	.+22     	; 0x1de <DIO_setPinValue+0x70>
	{
	SET_BIT(PORTB,PinId);	
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinValue+0x66>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinValue+0x62>
 1d8:	82 2b       	or	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
	}else{
	CLR_BIT(PORTB,PinId);	
 1de:	28 b3       	in	r18, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x7c>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x78>
 1ee:	80 95       	com	r24
 1f0:	82 23       	and	r24, r18
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(DIO_PIN_HIGH==PinValue)
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	59 f4       	brne	.+22     	; 0x210 <DIO_setPinValue+0xa2>
	{
	SET_BIT(PORTC,PinId);	
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0x98>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0x94>
 20a:	82 2b       	or	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
	}else{
	CLR_BIT(PORTC,PinId);	
 210:	25 b3       	in	r18, 0x15	; 21
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_setPinValue+0xae>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_setPinValue+0xaa>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
 226:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(DIO_PIN_HIGH==PinValue)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_setPinValue+0xd4>
	{
	SET_BIT(PORTD,PinId);	
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0xca>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0xc6>
 23c:	82 2b       	or	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret
	}else{
	CLR_BIT(PORTD,PinId);	
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_setPinValue+0xe0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_setPinValue+0xdc>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <DIO_getPinValue>:
}		
}

void DIO_getPinValue	(u8 PortId,u8 PinId,u8* PinValue)
{
if((PortId<=3)&&(PinId<=7)&&(PinValue != NULL))
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	08 f0       	brcs	.+2      	; 0x260 <DIO_getPinValue+0x6>
 25e:	4e c0       	rjmp	.+156    	; 0x2fc <DIO_getPinValue+0xa2>
 260:	68 30       	cpi	r22, 0x08	; 8
 262:	08 f0       	brcs	.+2      	; 0x266 <DIO_getPinValue+0xc>
 264:	4b c0       	rjmp	.+150    	; 0x2fc <DIO_getPinValue+0xa2>
 266:	41 15       	cp	r20, r1
 268:	51 05       	cpc	r21, r1
 26a:	09 f4       	brne	.+2      	; 0x26e <DIO_getPinValue+0x14>
 26c:	47 c0       	rjmp	.+142    	; 0x2fc <DIO_getPinValue+0xa2>
{
switch(PortId)
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	b1 f0       	breq	.+44     	; 0x29e <DIO_getPinValue+0x44>
 272:	28 f0       	brcs	.+10     	; 0x27e <DIO_getPinValue+0x24>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	19 f1       	breq	.+70     	; 0x2be <DIO_getPinValue+0x64>
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	89 f1       	breq	.+98     	; 0x2de <DIO_getPinValue+0x84>
 27c:	08 95       	ret
{
	case DIO_PORTA:
	if(DIO_PIN_HIGH==GET_BIT(PINA,PinId))
 27e:	89 b3       	in	r24, 0x19	; 25
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_getPinValue+0x2e>
 284:	95 95       	asr	r25
 286:	87 95       	ror	r24
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_getPinValue+0x2a>
 28c:	80 ff       	sbrs	r24, 0
 28e:	04 c0       	rjmp	.+8      	; 0x298 <DIO_getPinValue+0x3e>
	{
	*PinValue = DIO_PIN_HIGH;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	fa 01       	movw	r30, r20
 294:	80 83       	st	Z, r24
 296:	08 95       	ret
	}else{
		*PinValue = DIO_PIN_LOW;
 298:	fa 01       	movw	r30, r20
 29a:	10 82       	st	Z, r1
 29c:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
if(DIO_PIN_HIGH==GET_BIT(PINB,PinId))
 29e:	86 b3       	in	r24, 0x16	; 22
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_getPinValue+0x4e>
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_getPinValue+0x4a>
 2ac:	80 ff       	sbrs	r24, 0
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <DIO_getPinValue+0x5e>
	{
	*PinValue = DIO_PIN_HIGH;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	fa 01       	movw	r30, r20
 2b4:	80 83       	st	Z, r24
 2b6:	08 95       	ret
	}else{
		*PinValue = DIO_PIN_LOW;
 2b8:	fa 01       	movw	r30, r20
 2ba:	10 82       	st	Z, r1
 2bc:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
if(DIO_PIN_HIGH==GET_BIT(PINC,PinId))
 2be:	83 b3       	in	r24, 0x13	; 19
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_getPinValue+0x6e>
 2c4:	95 95       	asr	r25
 2c6:	87 95       	ror	r24
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_getPinValue+0x6a>
 2cc:	80 ff       	sbrs	r24, 0
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <DIO_getPinValue+0x7e>
	{
	*PinValue = DIO_PIN_HIGH;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	fa 01       	movw	r30, r20
 2d4:	80 83       	st	Z, r24
 2d6:	08 95       	ret
	}else{
		*PinValue = DIO_PIN_LOW;
 2d8:	fa 01       	movw	r30, r20
 2da:	10 82       	st	Z, r1
 2dc:	08 95       	ret
	}
	break;	
	case DIO_PORTD:
	if(DIO_PIN_HIGH==GET_BIT(PIND,PinId))
 2de:	80 b3       	in	r24, 0x10	; 16
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_getPinValue+0x8e>
 2e4:	95 95       	asr	r25
 2e6:	87 95       	ror	r24
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_getPinValue+0x8a>
 2ec:	80 ff       	sbrs	r24, 0
 2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <DIO_getPinValue+0x9e>
	{
	*PinValue = DIO_PIN_HIGH;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	fa 01       	movw	r30, r20
 2f4:	80 83       	st	Z, r24
 2f6:	08 95       	ret
	}else{
		*PinValue = DIO_PIN_LOW;
 2f8:	fa 01       	movw	r30, r20
 2fa:	10 82       	st	Z, r1
 2fc:	08 95       	ret

000002fe <writeHalfPort>:
	if (shiftDirection == LCD_SHIFT_LEFT)
	{
			LCD_sendCmnd(0b00011000);
	}else if(shiftDirection == LCD_SHIFT_RIGHT){
	
			LCD_sendCmnd(0b00011100);
 2fe:	cf 93       	push	r28
 300:	c8 2f       	mov	r28, r24
 302:	80 ff       	sbrs	r24, 0
 304:	06 c0       	rjmp	.+12     	; 0x312 <writeHalfPort+0x14>
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	64 e0       	ldi	r22, 0x04	; 4
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 310:	05 c0       	rjmp	.+10     	; 0x31c <writeHalfPort+0x1e>
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	64 e0       	ldi	r22, 0x04	; 4
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 31c:	c1 ff       	sbrs	r28, 1
 31e:	06 c0       	rjmp	.+12     	; 0x32c <writeHalfPort+0x2e>
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	65 e0       	ldi	r22, 0x05	; 5
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 32a:	05 c0       	rjmp	.+10     	; 0x336 <writeHalfPort+0x38>
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	65 e0       	ldi	r22, 0x05	; 5
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 336:	c2 ff       	sbrs	r28, 2
 338:	06 c0       	rjmp	.+12     	; 0x346 <writeHalfPort+0x48>
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	66 e0       	ldi	r22, 0x06	; 6
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 344:	05 c0       	rjmp	.+10     	; 0x350 <writeHalfPort+0x52>
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	66 e0       	ldi	r22, 0x06	; 6
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 350:	c3 ff       	sbrs	r28, 3
 352:	06 c0       	rjmp	.+12     	; 0x360 <writeHalfPort+0x62>
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	67 e0       	ldi	r22, 0x07	; 7
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 35e:	05 c0       	rjmp	.+10     	; 0x36a <writeHalfPort+0x6c>
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	67 e0       	ldi	r22, 0x07	; 7
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <LCD_setPinDirections>:
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	64 e0       	ldi	r22, 0x04	; 4
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	65 e0       	ldi	r22, 0x05	; 5
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	66 e0       	ldi	r22, 0x06	; 6
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	67 e0       	ldi	r22, 0x07	; 7
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	62 e0       	ldi	r22, 0x02	; 2
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	63 e0       	ldi	r22, 0x03	; 3
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
 3b4:	08 95       	ret

000003b6 <LCD_sendCmnd>:
 3b6:	cf 93       	push	r28
 3b8:	c8 2f       	mov	r28, r24
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	62 e0       	ldi	r22, 0x02	; 2
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3ce:	8c 2f       	mov	r24, r28
 3d0:	82 95       	swap	r24
 3d2:	8f 70       	andi	r24, 0x0F	; 15
 3d4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <writeHalfPort>
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	63 e0       	ldi	r22, 0x03	; 3
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3e2:	8f e9       	ldi	r24, 0x9F	; 159
 3e4:	9f e0       	ldi	r25, 0x0F	; 15
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCD_sendCmnd+0x30>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCD_sendCmnd+0x36>
 3ec:	00 00       	nop
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 3f8:	8c 2f       	mov	r24, r28
 3fa:	0e 94 7f 01 	call	0x2fe	; 0x2fe <writeHalfPort>
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	63 e0       	ldi	r22, 0x03	; 3
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 408:	8f e9       	ldi	r24, 0x9F	; 159
 40a:	9f e0       	ldi	r25, 0x0F	; 15
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 412:	00 00       	nop
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	63 e0       	ldi	r22, 0x03	; 3
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <LCD_init>:
 422:	2f e7       	ldi	r18, 0x7F	; 127
 424:	85 eb       	ldi	r24, 0xB5	; 181
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	21 50       	subi	r18, 0x01	; 1
 42a:	80 40       	sbci	r24, 0x00	; 0
 42c:	90 40       	sbci	r25, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <LCD_init+0x6>
 430:	00 c0       	rjmp	.+0      	; 0x432 <LCD_init+0x10>
 432:	00 00       	nop
 434:	40 e0       	ldi	r20, 0x00	; 0
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	62 e0       	ldi	r22, 0x02	; 2
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <writeHalfPort>
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	63 e0       	ldi	r22, 0x03	; 3
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 458:	8f e9       	ldi	r24, 0x9F	; 159
 45a:	9f e0       	ldi	r25, 0x0F	; 15
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <LCD_init+0x3a>
 460:	00 c0       	rjmp	.+0      	; 0x462 <LCD_init+0x40>
 462:	00 00       	nop
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	63 e0       	ldi	r22, 0x03	; 3
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 46e:	88 e2       	ldi	r24, 0x28	; 40
 470:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_sendCmnd>
 474:	90 ef       	ldi	r25, 0xF0	; 240
 476:	9a 95       	dec	r25
 478:	f1 f7       	brne	.-4      	; 0x476 <LCD_init+0x54>
 47a:	8f e0       	ldi	r24, 0x0F	; 15
 47c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_sendCmnd>
 480:	20 ef       	ldi	r18, 0xF0	; 240
 482:	2a 95       	dec	r18
 484:	f1 f7       	brne	.-4      	; 0x482 <LCD_init+0x60>
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_sendCmnd>
 48c:	8f e3       	ldi	r24, 0x3F	; 63
 48e:	9f e1       	ldi	r25, 0x1F	; 31
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <LCD_init+0x6e>
 494:	00 c0       	rjmp	.+0      	; 0x496 <LCD_init+0x74>
 496:	00 00       	nop
 498:	86 e0       	ldi	r24, 0x06	; 6
 49a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_sendCmnd>
 49e:	08 95       	ret

000004a0 <LCD_sendChar>:
 4a0:	cf 93       	push	r28
 4a2:	c8 2f       	mov	r28, r24
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	62 e0       	ldi	r22, 0x02	; 2
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 4b8:	8c 2f       	mov	r24, r28
 4ba:	82 95       	swap	r24
 4bc:	8f 70       	andi	r24, 0x0F	; 15
 4be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <writeHalfPort>
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 4cc:	8f e9       	ldi	r24, 0x9F	; 159
 4ce:	9f e0       	ldi	r25, 0x0F	; 15
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <LCD_sendChar+0x30>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <LCD_sendChar+0x36>
 4d6:	00 00       	nop
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	63 e0       	ldi	r22, 0x03	; 3
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 4e2:	8c 2f       	mov	r24, r28
 4e4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <writeHalfPort>
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	63 e0       	ldi	r22, 0x03	; 3
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 4f2:	8f e9       	ldi	r24, 0x9F	; 159
 4f4:	9f e0       	ldi	r25, 0x0F	; 15
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <LCD_sendChar+0x56>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <LCD_sendChar+0x5c>
 4fc:	00 00       	nop
 4fe:	40 e0       	ldi	r20, 0x00	; 0
 500:	63 e0       	ldi	r22, 0x03	; 3
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_setPinValue>
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <LCD_sendString>:
 50c:	0f 93       	push	r16
 50e:	1f 93       	push	r17
 510:	cf 93       	push	r28
 512:	00 97       	sbiw	r24, 0x00	; 0
 514:	29 f4       	brne	.+10     	; 0x520 <LCD_sendString+0x14>
 516:	0c c0       	rjmp	.+24     	; 0x530 <LCD_sendString+0x24>
 518:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_sendChar>
 51c:	cf 5f       	subi	r28, 0xFF	; 255
 51e:	02 c0       	rjmp	.+4      	; 0x524 <LCD_sendString+0x18>
 520:	8c 01       	movw	r16, r24
 522:	c0 e0       	ldi	r28, 0x00	; 0
 524:	f8 01       	movw	r30, r16
 526:	ec 0f       	add	r30, r28
 528:	f1 1d       	adc	r31, r1
 52a:	80 81       	ld	r24, Z
 52c:	81 11       	cpse	r24, r1
 52e:	f4 cf       	rjmp	.-24     	; 0x518 <LCD_sendString+0xc>
 530:	cf 91       	pop	r28
 532:	1f 91       	pop	r17
 534:	0f 91       	pop	r16
 536:	08 95       	ret

00000538 <LCD_typeString>:
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	cf 93       	push	r28
 53e:	00 97       	sbiw	r24, 0x00	; 0
 540:	71 f4       	brne	.+28     	; 0x55e <LCD_typeString+0x26>
 542:	15 c0       	rjmp	.+42     	; 0x56e <LCD_typeString+0x36>
 544:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_sendChar>
 548:	2f e7       	ldi	r18, 0x7F	; 127
 54a:	85 e4       	ldi	r24, 0x45	; 69
 54c:	93 e0       	ldi	r25, 0x03	; 3
 54e:	21 50       	subi	r18, 0x01	; 1
 550:	80 40       	sbci	r24, 0x00	; 0
 552:	90 40       	sbci	r25, 0x00	; 0
 554:	e1 f7       	brne	.-8      	; 0x54e <LCD_typeString+0x16>
 556:	00 c0       	rjmp	.+0      	; 0x558 <LCD_typeString+0x20>
 558:	00 00       	nop
 55a:	cf 5f       	subi	r28, 0xFF	; 255
 55c:	02 c0       	rjmp	.+4      	; 0x562 <LCD_typeString+0x2a>
 55e:	8c 01       	movw	r16, r24
 560:	c0 e0       	ldi	r28, 0x00	; 0
 562:	f8 01       	movw	r30, r16
 564:	ec 0f       	add	r30, r28
 566:	f1 1d       	adc	r31, r1
 568:	80 81       	ld	r24, Z
 56a:	81 11       	cpse	r24, r1
 56c:	eb cf       	rjmp	.-42     	; 0x544 <LCD_typeString+0xc>
 56e:	cf 91       	pop	r28
 570:	1f 91       	pop	r17
 572:	0f 91       	pop	r16
 574:	08 95       	ret

00000576 <LCD_clear>:
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_sendCmnd>
 57c:	8f e3       	ldi	r24, 0x3F	; 63
 57e:	9f e1       	ldi	r25, 0x1F	; 31
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <LCD_clear+0xa>
 584:	00 c0       	rjmp	.+0      	; 0x586 <LCD_clear+0x10>
 586:	00 00       	nop
 588:	08 95       	ret

0000058a <LCD_goToSpecificPosition>:
	}
}

void LCD_goToSpecificPosition(u8 lineNumber,u8 position)
{
	if(lineNumber == LCD_LINE_ONE)
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	39 f4       	brne	.+14     	; 0x59c <LCD_goToSpecificPosition+0x12>
	{
	if (position<16)
 58e:	60 31       	cpi	r22, 0x10	; 16
 590:	68 f4       	brcc	.+26     	; 0x5ac <LCD_goToSpecificPosition+0x22>
	{
	LCD_sendCmnd(0x80+position);	
 592:	80 e8       	ldi	r24, 0x80	; 128
 594:	86 0f       	add	r24, r22
 596:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_sendCmnd>
 59a:	08 95       	ret
	}
		
	}else if (lineNumber == LCD_LINE_TWO){
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	31 f4       	brne	.+12     	; 0x5ac <LCD_goToSpecificPosition+0x22>
	if (position<16)
 5a0:	60 31       	cpi	r22, 0x10	; 16
 5a2:	20 f4       	brcc	.+8      	; 0x5ac <LCD_goToSpecificPosition+0x22>
	{
	LCD_sendCmnd(0xC0+position);		
 5a4:	80 ec       	ldi	r24, 0xC0	; 192
 5a6:	86 0f       	add	r24, r22
 5a8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_sendCmnd>
 5ac:	08 95       	ret

000005ae <main>:
#include "LCD_config.h"



int main(void)
{
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <main+0x6>
 5b4:	1f 92       	push	r1
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62

LCD_setPinDirections();
 5ba:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_setPinDirections>
	/*Button Pins Direction*/
DIO_setPinDirection(DIO_PORTB,DIO_PIN0,DIO_PIN_INPUT); // B0
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
DIO_setPinDirection(DIO_PORTD,DIO_PIN6,DIO_PIN_INPUT); // B1
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	66 e0       	ldi	r22, 0x06	; 6
 5cc:	83 e0       	ldi	r24, 0x03	; 3
 5ce:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
DIO_setPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT) ; // B2
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	62 e0       	ldi	r22, 0x02	; 2
 5d6:	83 e0       	ldi	r24, 0x03	; 3
 5d8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>

u8 b0_state , b1_state , b2_state ; 

LCD_init();
 5dc:	0e 94 11 02 	call	0x422	; 0x422 <LCD_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e0:	2f ef       	ldi	r18, 0xFF	; 255
 5e2:	8d e3       	ldi	r24, 0x3D	; 61
 5e4:	99 e4       	ldi	r25, 0x49	; 73
 5e6:	21 50       	subi	r18, 0x01	; 1
 5e8:	80 40       	sbci	r24, 0x00	; 0
 5ea:	90 40       	sbci	r25, 0x00	; 0
 5ec:	e1 f7       	brne	.-8      	; 0x5e6 <main+0x38>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <main+0x42>
 5f0:	00 00       	nop
 5f2:	2f ef       	ldi	r18, 0xFF	; 255
 5f4:	89 e6       	ldi	r24, 0x69	; 105
 5f6:	98 e1       	ldi	r25, 0x18	; 24
 5f8:	21 50       	subi	r18, 0x01	; 1
 5fa:	80 40       	sbci	r24, 0x00	; 0
 5fc:	90 40       	sbci	r25, 0x00	; 0
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <main+0x4a>
 600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x54>
 602:	00 00       	nop

_delay_ms(1500);
start :
_delay_ms(500);
LCD_typeString((u8*)"Say My Name");
 604:	80 e6       	ldi	r24, 0x60	; 96
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 9c 02 	call	0x538	; 0x538 <LCD_typeString>
 60c:	2f ef       	ldi	r18, 0xFF	; 255
 60e:	81 ee       	ldi	r24, 0xE1	; 225
 610:	94 e0       	ldi	r25, 0x04	; 4
 612:	21 50       	subi	r18, 0x01	; 1
 614:	80 40       	sbci	r24, 0x00	; 0
 616:	90 40       	sbci	r25, 0x00	; 0
 618:	e1 f7       	brne	.-8      	; 0x612 <main+0x64>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <main+0x6e>
 61c:	00 00       	nop
_delay_ms(100);
LCD_sendChar(':');
 61e:	8a e3       	ldi	r24, 0x3A	; 58
 620:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_sendChar>
 624:	2f ef       	ldi	r18, 0xFF	; 255
 626:	87 e9       	ldi	r24, 0x97	; 151
 628:	9a e3       	ldi	r25, 0x3A	; 58
 62a:	21 50       	subi	r18, 0x01	; 1
 62c:	80 40       	sbci	r24, 0x00	; 0
 62e:	90 40       	sbci	r25, 0x00	; 0
 630:	e1 f7       	brne	.-8      	; 0x62a <main+0x7c>
 632:	00 c0       	rjmp	.+0      	; 0x634 <main+0x86>
 634:	00 00       	nop

_delay_ms(1200);
LCD_clear();
 636:	0e 94 bb 02 	call	0x576	; 0x576 <LCD_clear>
LCD_goToSpecificPosition(LCD_LINE_ONE,0);
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_goToSpecificPosition>
LCD_typeString((u8*)"1) Eren Yeager");
 642:	8c e6       	ldi	r24, 0x6C	; 108
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 9c 02 	call	0x538	; 0x538 <LCD_typeString>
LCD_goToSpecificPosition(LCD_LINE_TWO,0);
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	82 e0       	ldi	r24, 0x02	; 2
 64e:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_goToSpecificPosition>
 652:	2f ef       	ldi	r18, 0xFF	; 255
 654:	83 ec       	ldi	r24, 0xC3	; 195
 656:	99 e0       	ldi	r25, 0x09	; 9
 658:	21 50       	subi	r18, 0x01	; 1
 65a:	80 40       	sbci	r24, 0x00	; 0
 65c:	90 40       	sbci	r25, 0x00	; 0
 65e:	e1 f7       	brne	.-8      	; 0x658 <main+0xaa>
 660:	00 c0       	rjmp	.+0      	; 0x662 <main+0xb4>
 662:	00 00       	nop
_delay_ms(200);
LCD_typeString((u8*)"2) Heisenberg");
 664:	8b e7       	ldi	r24, 0x7B	; 123
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 9c 02 	call	0x538	; 0x538 <LCD_typeString>

	while(1)
	{
				DIO_getPinValue(DIO_PORTB,DIO_PIN0,&b0_state) ;
 66c:	ae 01       	movw	r20, r28
 66e:	4f 5f       	subi	r20, 0xFF	; 255
 670:	5f 4f       	sbci	r21, 0xFF	; 255
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_getPinValue>
				DIO_getPinValue(DIO_PORTD,DIO_PIN6,&b1_state) ;
 67a:	ae 01       	movw	r20, r28
 67c:	4e 5f       	subi	r20, 0xFE	; 254
 67e:	5f 4f       	sbci	r21, 0xFF	; 255
 680:	66 e0       	ldi	r22, 0x06	; 6
 682:	83 e0       	ldi	r24, 0x03	; 3
 684:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_getPinValue>
				DIO_getPinValue(DIO_PORTD,DIO_PIN2,&b2_state) ;
 688:	ae 01       	movw	r20, r28
 68a:	4d 5f       	subi	r20, 0xFD	; 253
 68c:	5f 4f       	sbci	r21, 0xFF	; 255
 68e:	62 e0       	ldi	r22, 0x02	; 2
 690:	83 e0       	ldi	r24, 0x03	; 3
 692:	0e 94 2d 01 	call	0x25a	; 0x25a <DIO_getPinValue>
				
				 if (DIO_PIN_HIGH==b0_state)
 696:	89 81       	ldd	r24, Y+1	; 0x01
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	19 f4       	brne	.+6      	; 0x6a2 <main+0xf4>
				 {
				LCD_clear();
 69c:	0e 94 bb 02 	call	0x576	; 0x576 <LCD_clear>
				goto start; 
 6a0:	a8 cf       	rjmp	.-176    	; 0x5f2 <main+0x44>
				 }
			

				 if (DIO_PIN_HIGH==b1_state)
 6a2:	8a 81       	ldd	r24, Y+2	; 0x02
 6a4:	81 30       	cpi	r24, 0x01	; 1
 6a6:	31 f5       	brne	.+76     	; 0x6f4 <main+0x146>
				 {
					 LCD_clear();
 6a8:	0e 94 bb 02 	call	0x576	; 0x576 <LCD_clear>
					LCD_goToSpecificPosition(LCD_LINE_ONE,0);
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_goToSpecificPosition>
					LCD_sendString((u8*)"## ");
 6b4:	89 e8       	ldi	r24, 0x89	; 137
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_sendString>
					LCD_goToSpecificPosition(LCD_LINE_ONE,14);
 6bc:	6e e0       	ldi	r22, 0x0E	; 14
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_goToSpecificPosition>
					LCD_sendString((u8*)" ##");
 6c4:	8d e8       	ldi	r24, 0x8D	; 141
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_sendString>
					LCD_goToSpecificPosition(LCD_LINE_ONE,3);
 6cc:	63 e0       	ldi	r22, 0x03	; 3
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_goToSpecificPosition>
					LCD_typeString((u8*)"TATAKAI !!");
 6d4:	81 e9       	ldi	r24, 0x91	; 145
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 9c 02 	call	0x538	; 0x538 <LCD_typeString>
 6dc:	2f ef       	ldi	r18, 0xFF	; 255
 6de:	85 ee       	ldi	r24, 0xE5	; 229
 6e0:	9a ea       	ldi	r25, 0xAA	; 170
 6e2:	21 50       	subi	r18, 0x01	; 1
 6e4:	80 40       	sbci	r24, 0x00	; 0
 6e6:	90 40       	sbci	r25, 0x00	; 0
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <main+0x134>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x13e>
 6ec:	00 00       	nop
								_delay_ms(3500);
								LCD_clear();
 6ee:	0e 94 bb 02 	call	0x576	; 0x576 <LCD_clear>
								goto start;
 6f2:	7f cf       	rjmp	.-258    	; 0x5f2 <main+0x44>
				 }

				 
				 if (DIO_PIN_HIGH==b2_state)
 6f4:	8b 81       	ldd	r24, Y+3	; 0x03
 6f6:	81 30       	cpi	r24, 0x01	; 1
 6f8:	09 f0       	breq	.+2      	; 0x6fc <main+0x14e>
 6fa:	b8 cf       	rjmp	.-144    	; 0x66c <main+0xbe>
				 {
					 LCD_clear();
 6fc:	0e 94 bb 02 	call	0x576	; 0x576 <LCD_clear>
					LCD_goToSpecificPosition(LCD_LINE_ONE,0);
 700:	60 e0       	ldi	r22, 0x00	; 0
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_goToSpecificPosition>
					LCD_typeString((u8*)"You're God Damn");
 708:	8c e9       	ldi	r24, 0x9C	; 156
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 94 9c 02 	call	0x538	; 0x538 <LCD_typeString>
					LCD_goToSpecificPosition(LCD_LINE_TWO,0);
 710:	60 e0       	ldi	r22, 0x00	; 0
 712:	82 e0       	ldi	r24, 0x02	; 2
 714:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_goToSpecificPosition>
					LCD_typeString((u8*)"Right!");
 718:	8c ea       	ldi	r24, 0xAC	; 172
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 9c 02 	call	0x538	; 0x538 <LCD_typeString>
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	85 ee       	ldi	r24, 0xE5	; 229
 724:	9a ea       	ldi	r25, 0xAA	; 170
 726:	21 50       	subi	r18, 0x01	; 1
 728:	80 40       	sbci	r24, 0x00	; 0
 72a:	90 40       	sbci	r25, 0x00	; 0
 72c:	e1 f7       	brne	.-8      	; 0x726 <main+0x178>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <main+0x182>
 730:	00 00       	nop
					_delay_ms(3500);
					LCD_clear();
 732:	0e 94 bb 02 	call	0x576	; 0x576 <LCD_clear>
					goto start;
 736:	5d cf       	rjmp	.-326    	; 0x5f2 <main+0x44>

00000738 <_exit>:
 738:	f8 94       	cli

0000073a <__stop_program>:
 73a:	ff cf       	rjmp	.-2      	; 0x73a <__stop_program>
