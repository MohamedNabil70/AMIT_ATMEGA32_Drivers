
STEPM driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e2c  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000799  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c5  00000000  00000000  00001b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  00002438  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000479  00000000  00000000  00002564  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000712  00000000  00000000  000029dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000030ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 22 01 	call	0x244	; 0x244 <main>
  64:	0c 94 1c 02 	jmp	0x438	; 0x438 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_setPinDirection>:


/*Pin Apis*/
void DIO_setPinDirection(u8 PortId,u8 PinId,u8 PinDirection)
{
if((PortId<=3)&&(PinId<=7)&&((PinDirection== DIO_PIN_INPUT)||(PinDirection==DIO_PIN_OUTPUT)))
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_setPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <DIO_setPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_setPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_setPinDirection+0xea>
  78:	42 30       	cpi	r20, 0x02	; 2
  7a:	08 f0       	brcs	.+2      	; 0x7e <DIO_setPinDirection+0x12>
  7c:	6c c0       	rjmp	.+216    	; 0x156 <DIO_setPinDirection+0xea>
{
switch(PortId)
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	01 f1       	breq	.+64     	; 0xc2 <DIO_setPinDirection+0x56>
  82:	30 f0       	brcs	.+12     	; 0x90 <DIO_setPinDirection+0x24>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	b1 f1       	breq	.+108    	; 0xf4 <DIO_setPinDirection+0x88>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_setPinDirection+0x22>
  8c:	4c c0       	rjmp	.+152    	; 0x126 <DIO_setPinDirection+0xba>
  8e:	08 95       	ret
{
	case DIO_PORTA:
	if(1==PinDirection)
  90:	41 30       	cpi	r20, 0x01	; 1
  92:	59 f4       	brne	.+22     	; 0xaa <DIO_setPinDirection+0x3e>
	{
	SET_BIT(DDRA,PinId);	
  94:	2a b3       	in	r18, 0x1a	; 26
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <DIO_setPinDirection+0x34>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <DIO_setPinDirection+0x30>
  a4:	82 2b       	or	r24, r18
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret
	}else{
	CLR_BIT(DDRA,PinId);	
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x4a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x46>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(1==PinDirection)
  c2:	41 30       	cpi	r20, 0x01	; 1
  c4:	59 f4       	brne	.+22     	; 0xdc <DIO_setPinDirection+0x70>
	{
	SET_BIT(DDRB,PinId);	
  c6:	27 b3       	in	r18, 0x17	; 23
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_setPinDirection+0x66>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_setPinDirection+0x62>
  d6:	82 2b       	or	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
  da:	08 95       	ret
	}else{
	CLR_BIT(DDRB,PinId);	
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x78>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(1==PinDirection)
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	59 f4       	brne	.+22     	; 0x10e <DIO_setPinDirection+0xa2>
	{
	SET_BIT(DDRC,PinId);	
  f8:	24 b3       	in	r18, 0x14	; 20
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_setPinDirection+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_setPinDirection+0x94>
 108:	82 2b       	or	r24, r18
 10a:	84 bb       	out	0x14, r24	; 20
 10c:	08 95       	ret
	}else{
	CLR_BIT(DDRC,PinId);	
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0xae>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0xaa>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	84 bb       	out	0x14, r24	; 20
 124:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(1==PinDirection)
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	59 f4       	brne	.+22     	; 0x140 <DIO_setPinDirection+0xd4>
	{
	SET_BIT(DDRD,PinId);	
 12a:	21 b3       	in	r18, 0x11	; 17
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_setPinDirection+0xca>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_setPinDirection+0xc6>
 13a:	82 2b       	or	r24, r18
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret
	}else{
	CLR_BIT(DDRD,PinId);	
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xdc>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <DIO_setPinValue>:
}


void DIO_setPinValue	(u8 PortId,u8 PinId,u8 PinValue)
{
if((PortId<=3)&&(PinId<=7)&&((PinValue==DIO_PIN_LOW)||(PinValue==DIO_PIN_HIGH)))
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	08 f0       	brcs	.+2      	; 0x15e <DIO_setPinValue+0x6>
 15c:	72 c0       	rjmp	.+228    	; 0x242 <DIO_setPinValue+0xea>
 15e:	68 30       	cpi	r22, 0x08	; 8
 160:	08 f0       	brcs	.+2      	; 0x164 <DIO_setPinValue+0xc>
 162:	6f c0       	rjmp	.+222    	; 0x242 <DIO_setPinValue+0xea>
 164:	42 30       	cpi	r20, 0x02	; 2
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_setPinValue+0x12>
 168:	6c c0       	rjmp	.+216    	; 0x242 <DIO_setPinValue+0xea>
{
switch(PortId)
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	01 f1       	breq	.+64     	; 0x1ae <DIO_setPinValue+0x56>
 16e:	30 f0       	brcs	.+12     	; 0x17c <DIO_setPinValue+0x24>
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	b1 f1       	breq	.+108    	; 0x1e0 <DIO_setPinValue+0x88>
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	09 f4       	brne	.+2      	; 0x17a <DIO_setPinValue+0x22>
 178:	4c c0       	rjmp	.+152    	; 0x212 <DIO_setPinValue+0xba>
 17a:	08 95       	ret
{
	case DIO_PORTA:
	if(DIO_PIN_HIGH==PinValue)
 17c:	41 30       	cpi	r20, 0x01	; 1
 17e:	59 f4       	brne	.+22     	; 0x196 <DIO_setPinValue+0x3e>
	{
	SET_BIT(PORTA,PinId);	
 180:	2b b3       	in	r18, 0x1b	; 27
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_setPinValue+0x34>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_setPinValue+0x30>
 190:	82 2b       	or	r24, r18
 192:	8b bb       	out	0x1b, r24	; 27
 194:	08 95       	ret
	}else{
	CLR_BIT(PORTA,PinId);	
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinValue+0x4a>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinValue+0x46>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(DIO_PIN_HIGH==PinValue)
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	59 f4       	brne	.+22     	; 0x1c8 <DIO_setPinValue+0x70>
	{
	SET_BIT(PORTB,PinId);	
 1b2:	28 b3       	in	r18, 0x18	; 24
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_setPinValue+0x66>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_setPinValue+0x62>
 1c2:	82 2b       	or	r24, r18
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	08 95       	ret
	}else{
	CLR_BIT(PORTB,PinId);	
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinValue+0x7c>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinValue+0x78>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(DIO_PIN_HIGH==PinValue)
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	59 f4       	brne	.+22     	; 0x1fa <DIO_setPinValue+0xa2>
	{
	SET_BIT(PORTC,PinId);	
 1e4:	25 b3       	in	r18, 0x15	; 21
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_setPinValue+0x98>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_setPinValue+0x94>
 1f4:	82 2b       	or	r24, r18
 1f6:	85 bb       	out	0x15, r24	; 21
 1f8:	08 95       	ret
	}else{
	CLR_BIT(PORTC,PinId);	
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0xae>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0xaa>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	85 bb       	out	0x15, r24	; 21
 210:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(DIO_PIN_HIGH==PinValue)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	59 f4       	brne	.+22     	; 0x22c <DIO_setPinValue+0xd4>
	{
	SET_BIT(PORTD,PinId);	
 216:	22 b3       	in	r18, 0x12	; 18
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_setPinValue+0xca>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_setPinValue+0xc6>
 226:	82 2b       	or	r24, r18
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret
	}else{
	CLR_BIT(PORTD,PinId);	
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0xe0>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0xdc>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret

00000244 <main>:
	#include "STEPM_interface.h"


int main(void)
{
  STEPM_init();
 244:	0e 94 52 01 	call	0x2a4	; 0x2a4 <STEPM_init>
DIO_setPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);  
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	67 e0       	ldi	r22, 0x07	; 7
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
 DIO_setPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	62 e0       	ldi	r22, 0x02	; 2
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
DIO_setPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_OUTPUT);
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	63 e0       	ldi	r22, 0x03	; 3
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
 DIO_setPinDirection(DIO_PORTA,DIO_PIN3,DIO_PIN_OUTPUT);
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	63 e0       	ldi	r22, 0x03	; 3
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>



STEPM_rotateAngle(180);	
 270:	64 eb       	ldi	r22, 0xB4	; 180
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 67 01 	call	0x2ce	; 0x2ce <STEPM_rotateAngle>
 DIO_setPinValue(DIO_PORTA,DIO_PIN3,DIO_PIN_HIGH);
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	63 e0       	ldi	r22, 0x03	; 3
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	83 ef       	ldi	r24, 0xF3	; 243
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x48>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x52>
 296:	00 00       	nop
 _delay_ms(40);
 DIO_setPinValue(DIO_PORTA,DIO_PIN3,DIO_PIN_LOW);
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	63 e0       	ldi	r22, 0x03	; 3
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <main+0x5e>

000002a4 <STEPM_init>:
	#include "STEPM_interface.h"
	
	
	void STEPM_init(void)
	{
	DIO_setPinDirection(STEPM_PORT,STEPM_PIN1,DIO_PIN_OUTPUT);
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	64 e0       	ldi	r22, 0x04	; 4
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(STEPM_PORT,STEPM_PIN2,DIO_PIN_OUTPUT);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	65 e0       	ldi	r22, 0x05	; 5
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(STEPM_PORT,STEPM_PIN3,DIO_PIN_OUTPUT);
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	66 e0       	ldi	r22, 0x06	; 6
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(STEPM_PORT,STEPM_PIN4,DIO_PIN_OUTPUT);
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	67 e0       	ldi	r22, 0x07	; 7
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
 2cc:	08 95       	ret

000002ce <STEPM_rotateAngle>:
	}
	
	void STEPM_rotateAngle(u32 angleByDegree)
	{
 2ce:	cf 92       	push	r12
 2d0:	df 92       	push	r13
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
u16 pattern;
u32 iterations;	

iterations=((angleByDegree*512)/360);
 2da:	05 2e       	mov	r0, r21
 2dc:	59 e0       	ldi	r21, 0x09	; 9
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	5a 95       	dec	r21
 2e8:	d1 f7       	brne	.-12     	; 0x2de <STEPM_rotateAngle+0x10>
 2ea:	50 2d       	mov	r21, r0
 2ec:	28 e6       	ldi	r18, 0x68	; 104
 2ee:	31 e0       	ldi	r19, 0x01	; 1
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	50 e0       	ldi	r21, 0x00	; 0
 2f4:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__udivmodsi4>
 2f8:	69 01       	movw	r12, r18
 2fa:	7a 01       	movw	r14, r20
for(pattern=0;pattern<iterations;pattern++)
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
 300:	69 c0       	rjmp	.+210    	; 0x3d4 <STEPM_rotateAngle+0x106>
{
	//step 1
	DIO_setPinValue(STEPM_PORT,STEPM_PIN1,DIO_PIN_LOW);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	64 e0       	ldi	r22, 0x04	; 4
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(STEPM_PORT,STEPM_PIN2,DIO_PIN_HIGH);
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	65 e0       	ldi	r22, 0x05	; 5
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(STEPM_PORT,STEPM_PIN3,DIO_PIN_HIGH);
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	66 e0       	ldi	r22, 0x06	; 6
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(STEPM_PORT,STEPM_PIN4,DIO_PIN_HIGH);
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	67 e0       	ldi	r22, 0x07	; 7
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 32a:	8f e3       	ldi	r24, 0x3F	; 63
 32c:	9c e9       	ldi	r25, 0x9C	; 156
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <STEPM_rotateAngle+0x60>
 332:	00 c0       	rjmp	.+0      	; 0x334 <STEPM_rotateAngle+0x66>
 334:	00 00       	nop
	_delay_ms(10);
	
	//step 2
	DIO_setPinValue(STEPM_PORT,STEPM_PIN1,DIO_PIN_HIGH);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	64 e0       	ldi	r22, 0x04	; 4
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(STEPM_PORT,STEPM_PIN2,DIO_PIN_LOW);
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	65 e0       	ldi	r22, 0x05	; 5
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(STEPM_PORT,STEPM_PIN3,DIO_PIN_HIGH);
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	66 e0       	ldi	r22, 0x06	; 6
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(STEPM_PORT,STEPM_PIN4,DIO_PIN_HIGH);
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	67 e0       	ldi	r22, 0x07	; 7
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 35e:	8f e3       	ldi	r24, 0x3F	; 63
 360:	9c e9       	ldi	r25, 0x9C	; 156
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <STEPM_rotateAngle+0x94>
 366:	00 c0       	rjmp	.+0      	; 0x368 <STEPM_rotateAngle+0x9a>
 368:	00 00       	nop
	_delay_ms(10);
	
	//step 3
	DIO_setPinValue(STEPM_PORT,STEPM_PIN1,DIO_PIN_HIGH);
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	64 e0       	ldi	r22, 0x04	; 4
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(STEPM_PORT,STEPM_PIN2,DIO_PIN_HIGH);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	65 e0       	ldi	r22, 0x05	; 5
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(STEPM_PORT,STEPM_PIN3,DIO_PIN_LOW);
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	66 e0       	ldi	r22, 0x06	; 6
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(STEPM_PORT,STEPM_PIN4,DIO_PIN_HIGH);
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	67 e0       	ldi	r22, 0x07	; 7
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 392:	8f e3       	ldi	r24, 0x3F	; 63
 394:	9c e9       	ldi	r25, 0x9C	; 156
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <STEPM_rotateAngle+0xc8>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <STEPM_rotateAngle+0xce>
 39c:	00 00       	nop
	_delay_ms(10);
	
	//step 4
	DIO_setPinValue(STEPM_PORT,STEPM_PIN1,DIO_PIN_HIGH);
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	64 e0       	ldi	r22, 0x04	; 4
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(STEPM_PORT,STEPM_PIN2,DIO_PIN_HIGH);
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	65 e0       	ldi	r22, 0x05	; 5
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(STEPM_PORT,STEPM_PIN3,DIO_PIN_HIGH);
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	66 e0       	ldi	r22, 0x06	; 6
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(STEPM_PORT,STEPM_PIN4,DIO_PIN_LOW);
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	67 e0       	ldi	r22, 0x07	; 7
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 3c6:	8f e3       	ldi	r24, 0x3F	; 63
 3c8:	9c e9       	ldi	r25, 0x9C	; 156
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <STEPM_rotateAngle+0xfc>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <STEPM_rotateAngle+0x102>
 3d0:	00 00       	nop
	{
u16 pattern;
u32 iterations;	

iterations=((angleByDegree*512)/360);
for(pattern=0;pattern<iterations;pattern++)
 3d2:	21 96       	adiw	r28, 0x01	; 1
 3d4:	ce 01       	movw	r24, r28
 3d6:	a0 e0       	ldi	r26, 0x00	; 0
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	8c 15       	cp	r24, r12
 3dc:	9d 05       	cpc	r25, r13
 3de:	ae 05       	cpc	r26, r14
 3e0:	bf 05       	cpc	r27, r15
 3e2:	08 f4       	brcc	.+2      	; 0x3e6 <STEPM_rotateAngle+0x118>
 3e4:	8e cf       	rjmp	.-228    	; 0x302 <STEPM_rotateAngle+0x34>
	DIO_setPinValue(STEPM_PORT,STEPM_PIN3,DIO_PIN_HIGH);
	DIO_setPinValue(STEPM_PORT,STEPM_PIN4,DIO_PIN_LOW);
	_delay_ms(10);	
}
		
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	df 90       	pop	r13
 3f0:	cf 90       	pop	r12
 3f2:	08 95       	ret

000003f4 <__udivmodsi4>:
 3f4:	a1 e2       	ldi	r26, 0x21	; 33
 3f6:	1a 2e       	mov	r1, r26
 3f8:	aa 1b       	sub	r26, r26
 3fa:	bb 1b       	sub	r27, r27
 3fc:	fd 01       	movw	r30, r26
 3fe:	0d c0       	rjmp	.+26     	; 0x41a <__udivmodsi4_ep>

00000400 <__udivmodsi4_loop>:
 400:	aa 1f       	adc	r26, r26
 402:	bb 1f       	adc	r27, r27
 404:	ee 1f       	adc	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	a2 17       	cp	r26, r18
 40a:	b3 07       	cpc	r27, r19
 40c:	e4 07       	cpc	r30, r20
 40e:	f5 07       	cpc	r31, r21
 410:	20 f0       	brcs	.+8      	; 0x41a <__udivmodsi4_ep>
 412:	a2 1b       	sub	r26, r18
 414:	b3 0b       	sbc	r27, r19
 416:	e4 0b       	sbc	r30, r20
 418:	f5 0b       	sbc	r31, r21

0000041a <__udivmodsi4_ep>:
 41a:	66 1f       	adc	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	88 1f       	adc	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	1a 94       	dec	r1
 424:	69 f7       	brne	.-38     	; 0x400 <__udivmodsi4_loop>
 426:	60 95       	com	r22
 428:	70 95       	com	r23
 42a:	80 95       	com	r24
 42c:	90 95       	com	r25
 42e:	9b 01       	movw	r18, r22
 430:	ac 01       	movw	r20, r24
 432:	bd 01       	movw	r22, r26
 434:	cf 01       	movw	r24, r30
 436:	08 95       	ret

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
