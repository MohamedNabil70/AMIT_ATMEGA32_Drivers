
EXTERNAL INTERRUPT driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000510  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d14  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ac  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000925  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00002474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c7  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000089d  00000000  00000000  00002cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_1>
   8:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_2>
   c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 32 02 	call	0x464	; 0x464 <main>
  74:	0c 94 4c 02 	jmp	0x498	; 0x498 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_setPinDirection>:


/*Pin Apis*/
void DIO_setPinDirection(u8 PortId,u8 PinId,u8 PinDirection)
{
if((PortId<=3)&&(PinId<=7)&&((PinDirection== DIO_PIN_INPUT)||(PinDirection==DIO_PIN_OUTPUT)))
  7c:	84 30       	cpi	r24, 0x04	; 4
  7e:	08 f0       	brcs	.+2      	; 0x82 <DIO_setPinDirection+0x6>
  80:	72 c0       	rjmp	.+228    	; 0x166 <DIO_setPinDirection+0xea>
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_setPinDirection+0xc>
  86:	6f c0       	rjmp	.+222    	; 0x166 <DIO_setPinDirection+0xea>
  88:	42 30       	cpi	r20, 0x02	; 2
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_setPinDirection+0x12>
  8c:	6c c0       	rjmp	.+216    	; 0x166 <DIO_setPinDirection+0xea>
{
switch(PortId)
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	01 f1       	breq	.+64     	; 0xd2 <DIO_setPinDirection+0x56>
  92:	30 f0       	brcs	.+12     	; 0xa0 <DIO_setPinDirection+0x24>
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	b1 f1       	breq	.+108    	; 0x104 <DIO_setPinDirection+0x88>
  98:	83 30       	cpi	r24, 0x03	; 3
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_setPinDirection+0x22>
  9c:	4c c0       	rjmp	.+152    	; 0x136 <DIO_setPinDirection+0xba>
  9e:	08 95       	ret
{
	case DIO_PORTA:
	if(1==PinDirection)
  a0:	41 30       	cpi	r20, 0x01	; 1
  a2:	59 f4       	brne	.+22     	; 0xba <DIO_setPinDirection+0x3e>
	{
	SET_BIT(DDRA,PinId);	
  a4:	2a b3       	in	r18, 0x1a	; 26
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_setPinDirection+0x34>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_setPinDirection+0x30>
  b4:	82 2b       	or	r24, r18
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	08 95       	ret
	}else{
	CLR_BIT(DDRA,PinId);	
  ba:	2a b3       	in	r18, 0x1a	; 26
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_setPinDirection+0x4a>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_setPinDirection+0x46>
  ca:	80 95       	com	r24
  cc:	82 23       	and	r24, r18
  ce:	8a bb       	out	0x1a, r24	; 26
  d0:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(1==PinDirection)
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	59 f4       	brne	.+22     	; 0xec <DIO_setPinDirection+0x70>
	{
	SET_BIT(DDRB,PinId);	
  d6:	27 b3       	in	r18, 0x17	; 23
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_setPinDirection+0x66>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_setPinDirection+0x62>
  e6:	82 2b       	or	r24, r18
  e8:	87 bb       	out	0x17, r24	; 23
  ea:	08 95       	ret
	}else{
	CLR_BIT(DDRB,PinId);	
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_setPinDirection+0x7c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_setPinDirection+0x78>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
 102:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(1==PinDirection)
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	59 f4       	brne	.+22     	; 0x11e <DIO_setPinDirection+0xa2>
	{
	SET_BIT(DDRC,PinId);	
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_setPinDirection+0x98>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_setPinDirection+0x94>
 118:	82 2b       	or	r24, r18
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	08 95       	ret
	}else{
	CLR_BIT(DDRC,PinId);	
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_setPinDirection+0xae>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_setPinDirection+0xaa>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(1==PinDirection)
 136:	41 30       	cpi	r20, 0x01	; 1
 138:	59 f4       	brne	.+22     	; 0x150 <DIO_setPinDirection+0xd4>
	{
	SET_BIT(DDRD,PinId);	
 13a:	21 b3       	in	r18, 0x11	; 17
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_setPinDirection+0xca>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_setPinDirection+0xc6>
 14a:	82 2b       	or	r24, r18
 14c:	81 bb       	out	0x11, r24	; 17
 14e:	08 95       	ret
	}else{
	CLR_BIT(DDRD,PinId);	
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_setPinDirection+0xe0>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_setPinDirection+0xdc>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret

00000168 <DIO_setPinValue>:
}


void DIO_setPinValue	(u8 PortId,u8 PinId,u8 PinValue)
{
if((PortId<=3)&&(PinId<=7)&&((PinValue==DIO_PIN_LOW)||(PinValue==DIO_PIN_HIGH)))
 168:	84 30       	cpi	r24, 0x04	; 4
 16a:	08 f0       	brcs	.+2      	; 0x16e <DIO_setPinValue+0x6>
 16c:	72 c0       	rjmp	.+228    	; 0x252 <DIO_setPinValue+0xea>
 16e:	68 30       	cpi	r22, 0x08	; 8
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_setPinValue+0xc>
 172:	6f c0       	rjmp	.+222    	; 0x252 <DIO_setPinValue+0xea>
 174:	42 30       	cpi	r20, 0x02	; 2
 176:	08 f0       	brcs	.+2      	; 0x17a <DIO_setPinValue+0x12>
 178:	6c c0       	rjmp	.+216    	; 0x252 <DIO_setPinValue+0xea>
{
switch(PortId)
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	01 f1       	breq	.+64     	; 0x1be <DIO_setPinValue+0x56>
 17e:	30 f0       	brcs	.+12     	; 0x18c <DIO_setPinValue+0x24>
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	b1 f1       	breq	.+108    	; 0x1f0 <DIO_setPinValue+0x88>
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	09 f4       	brne	.+2      	; 0x18a <DIO_setPinValue+0x22>
 188:	4c c0       	rjmp	.+152    	; 0x222 <DIO_setPinValue+0xba>
 18a:	08 95       	ret
{
	case DIO_PORTA:
	if(DIO_PIN_HIGH==PinValue)
 18c:	41 30       	cpi	r20, 0x01	; 1
 18e:	59 f4       	brne	.+22     	; 0x1a6 <DIO_setPinValue+0x3e>
	{
	SET_BIT(PORTA,PinId);	
 190:	2b b3       	in	r18, 0x1b	; 27
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_setPinValue+0x34>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_setPinValue+0x30>
 1a0:	82 2b       	or	r24, r18
 1a2:	8b bb       	out	0x1b, r24	; 27
 1a4:	08 95       	ret
	}else{
	CLR_BIT(PORTA,PinId);	
 1a6:	2b b3       	in	r18, 0x1b	; 27
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_setPinValue+0x4a>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_setPinValue+0x46>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	8b bb       	out	0x1b, r24	; 27
 1bc:	08 95       	ret
	}
	break;
	
	case DIO_PORTB:
		if(DIO_PIN_HIGH==PinValue)
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	59 f4       	brne	.+22     	; 0x1d8 <DIO_setPinValue+0x70>
	{
	SET_BIT(PORTB,PinId);	
 1c2:	28 b3       	in	r18, 0x18	; 24
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_setPinValue+0x66>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_setPinValue+0x62>
 1d2:	82 2b       	or	r24, r18
 1d4:	88 bb       	out	0x18, r24	; 24
 1d6:	08 95       	ret
	}else{
	CLR_BIT(PORTB,PinId);	
 1d8:	28 b3       	in	r18, 0x18	; 24
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_setPinValue+0x7c>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_setPinValue+0x78>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	88 bb       	out	0x18, r24	; 24
 1ee:	08 95       	ret
	}
	break;
		
	case DIO_PORTC:
			if(DIO_PIN_HIGH==PinValue)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	59 f4       	brne	.+22     	; 0x20a <DIO_setPinValue+0xa2>
	{
	SET_BIT(PORTC,PinId);	
 1f4:	25 b3       	in	r18, 0x15	; 21
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_setPinValue+0x98>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_setPinValue+0x94>
 204:	82 2b       	or	r24, r18
 206:	85 bb       	out	0x15, r24	; 21
 208:	08 95       	ret
	}else{
	CLR_BIT(PORTC,PinId);	
 20a:	25 b3       	in	r18, 0x15	; 21
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_setPinValue+0xae>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_setPinValue+0xaa>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	85 bb       	out	0x15, r24	; 21
 220:	08 95       	ret
	}
	break;	
	
	case DIO_PORTD:
			if(DIO_PIN_HIGH==PinValue)
 222:	41 30       	cpi	r20, 0x01	; 1
 224:	59 f4       	brne	.+22     	; 0x23c <DIO_setPinValue+0xd4>
	{
	SET_BIT(PORTD,PinId);	
 226:	22 b3       	in	r18, 0x12	; 18
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_setPinValue+0xca>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_setPinValue+0xc6>
 236:	82 2b       	or	r24, r18
 238:	82 bb       	out	0x12, r24	; 18
 23a:	08 95       	ret
	}else{
	CLR_BIT(PORTD,PinId);	
 23c:	22 b3       	in	r18, 0x12	; 18
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_setPinValue+0xe0>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_setPinValue+0xdc>
 24c:	80 95       	com	r24
 24e:	82 23       	and	r24, r18
 250:	82 bb       	out	0x12, r24	; 18
 252:	08 95       	ret

00000254 <EXTI_enable>:

void EXTI_INT2SetCallBack(void(*ptr)(void))
{
	if (ptr!=NULL)
	{
		INT2_pCallBack=ptr;
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	61 f1       	breq	.+88     	; 0x2b0 <EXTI_enable+0x5c>
 258:	20 f0       	brcs	.+8      	; 0x262 <EXTI_enable+0xe>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	09 f4       	brne	.+2      	; 0x260 <EXTI_enable+0xc>
 25e:	4f c0       	rjmp	.+158    	; 0x2fe <EXTI_enable+0xaa>
 260:	08 95       	ret
 262:	61 11       	cpse	r22, r1
 264:	07 c0       	rjmp	.+14     	; 0x274 <EXTI_enable+0x20>
 266:	85 b7       	in	r24, 0x35	; 53
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	85 bf       	out	0x35, r24	; 53
 26c:	85 b7       	in	r24, 0x35	; 53
 26e:	82 60       	ori	r24, 0x02	; 2
 270:	85 bf       	out	0x35, r24	; 53
 272:	1a c0       	rjmp	.+52     	; 0x2a8 <EXTI_enable+0x54>
 274:	61 30       	cpi	r22, 0x01	; 1
 276:	39 f4       	brne	.+14     	; 0x286 <EXTI_enable+0x32>
 278:	85 b7       	in	r24, 0x35	; 53
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	85 bf       	out	0x35, r24	; 53
 27e:	85 b7       	in	r24, 0x35	; 53
 280:	82 60       	ori	r24, 0x02	; 2
 282:	85 bf       	out	0x35, r24	; 53
 284:	11 c0       	rjmp	.+34     	; 0x2a8 <EXTI_enable+0x54>
 286:	62 30       	cpi	r22, 0x02	; 2
 288:	39 f4       	brne	.+14     	; 0x298 <EXTI_enable+0x44>
 28a:	85 b7       	in	r24, 0x35	; 53
 28c:	8e 7f       	andi	r24, 0xFE	; 254
 28e:	85 bf       	out	0x35, r24	; 53
 290:	85 b7       	in	r24, 0x35	; 53
 292:	8d 7f       	andi	r24, 0xFD	; 253
 294:	85 bf       	out	0x35, r24	; 53
 296:	08 c0       	rjmp	.+16     	; 0x2a8 <EXTI_enable+0x54>
 298:	63 30       	cpi	r22, 0x03	; 3
 29a:	31 f4       	brne	.+12     	; 0x2a8 <EXTI_enable+0x54>
 29c:	85 b7       	in	r24, 0x35	; 53
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	85 bf       	out	0x35, r24	; 53
 2a2:	85 b7       	in	r24, 0x35	; 53
 2a4:	8d 7f       	andi	r24, 0xFD	; 253
 2a6:	85 bf       	out	0x35, r24	; 53
 2a8:	8b b7       	in	r24, 0x3b	; 59
 2aa:	80 64       	ori	r24, 0x40	; 64
 2ac:	8b bf       	out	0x3b, r24	; 59
 2ae:	08 95       	ret
 2b0:	61 11       	cpse	r22, r1
 2b2:	07 c0       	rjmp	.+14     	; 0x2c2 <EXTI_enable+0x6e>
 2b4:	85 b7       	in	r24, 0x35	; 53
 2b6:	84 60       	ori	r24, 0x04	; 4
 2b8:	85 bf       	out	0x35, r24	; 53
 2ba:	85 b7       	in	r24, 0x35	; 53
 2bc:	88 60       	ori	r24, 0x08	; 8
 2be:	85 bf       	out	0x35, r24	; 53
 2c0:	1a c0       	rjmp	.+52     	; 0x2f6 <EXTI_enable+0xa2>
 2c2:	61 30       	cpi	r22, 0x01	; 1
 2c4:	39 f4       	brne	.+14     	; 0x2d4 <EXTI_enable+0x80>
 2c6:	85 b7       	in	r24, 0x35	; 53
 2c8:	8b 7f       	andi	r24, 0xFB	; 251
 2ca:	85 bf       	out	0x35, r24	; 53
 2cc:	85 b7       	in	r24, 0x35	; 53
 2ce:	88 60       	ori	r24, 0x08	; 8
 2d0:	85 bf       	out	0x35, r24	; 53
 2d2:	11 c0       	rjmp	.+34     	; 0x2f6 <EXTI_enable+0xa2>
 2d4:	62 30       	cpi	r22, 0x02	; 2
 2d6:	39 f4       	brne	.+14     	; 0x2e6 <EXTI_enable+0x92>
 2d8:	85 b7       	in	r24, 0x35	; 53
 2da:	8b 7f       	andi	r24, 0xFB	; 251
 2dc:	85 bf       	out	0x35, r24	; 53
 2de:	85 b7       	in	r24, 0x35	; 53
 2e0:	87 7f       	andi	r24, 0xF7	; 247
 2e2:	85 bf       	out	0x35, r24	; 53
 2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <EXTI_enable+0xa2>
 2e6:	63 30       	cpi	r22, 0x03	; 3
 2e8:	31 f4       	brne	.+12     	; 0x2f6 <EXTI_enable+0xa2>
 2ea:	85 b7       	in	r24, 0x35	; 53
 2ec:	84 60       	ori	r24, 0x04	; 4
 2ee:	85 bf       	out	0x35, r24	; 53
 2f0:	85 b7       	in	r24, 0x35	; 53
 2f2:	87 7f       	andi	r24, 0xF7	; 247
 2f4:	85 bf       	out	0x35, r24	; 53
 2f6:	8b b7       	in	r24, 0x3b	; 59
 2f8:	80 68       	ori	r24, 0x80	; 128
 2fa:	8b bf       	out	0x3b, r24	; 59
 2fc:	08 95       	ret
 2fe:	61 11       	cpse	r22, r1
 300:	04 c0       	rjmp	.+8      	; 0x30a <EXTI_enable+0xb6>
 302:	84 b7       	in	r24, 0x34	; 52
 304:	80 64       	ori	r24, 0x40	; 64
 306:	84 bf       	out	0x34, r24	; 52
 308:	05 c0       	rjmp	.+10     	; 0x314 <EXTI_enable+0xc0>
 30a:	61 30       	cpi	r22, 0x01	; 1
 30c:	19 f4       	brne	.+6      	; 0x314 <EXTI_enable+0xc0>
 30e:	84 b7       	in	r24, 0x34	; 52
 310:	8f 7b       	andi	r24, 0xBF	; 191
 312:	84 bf       	out	0x34, r24	; 52
 314:	8b b7       	in	r24, 0x3b	; 59
 316:	80 62       	ori	r24, 0x20	; 32
 318:	8b bf       	out	0x3b, r24	; 59
 31a:	08 95       	ret

0000031c <EXTI_INT0SetCallBack>:
 31c:	00 97       	sbiw	r24, 0x00	; 0
 31e:	21 f0       	breq	.+8      	; 0x328 <EXTI_INT0SetCallBack+0xc>
 320:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <INT0_pCallBack+0x1>
 324:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <INT0_pCallBack>
 328:	08 95       	ret

0000032a <__vector_1>:
}

//ISR Function prototype for EXTI0
void __vector_1(void) __attribute__ ((signal));
void __vector_1(void)
{
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	2f 93       	push	r18
 336:	3f 93       	push	r19
 338:	4f 93       	push	r20
 33a:	5f 93       	push	r21
 33c:	6f 93       	push	r22
 33e:	7f 93       	push	r23
 340:	8f 93       	push	r24
 342:	9f 93       	push	r25
 344:	af 93       	push	r26
 346:	bf 93       	push	r27
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31

	if (INT0_pCallBack!=NULL)
 34c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <INT0_pCallBack>
 350:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <INT0_pCallBack+0x1>
 354:	30 97       	sbiw	r30, 0x00	; 0
 356:	09 f0       	breq	.+2      	; 0x35a <__vector_1+0x30>
	{
		//call action
		INT0_pCallBack();
 358:	09 95       	icall
	}
}
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <__vector_2>:

//ISR Function prototype for EXTI1
void __vector_2(void) __attribute__ ((signal));
void __vector_2(void)
{
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	4f 93       	push	r20
 38c:	5f 93       	push	r21
 38e:	6f 93       	push	r22
 390:	7f 93       	push	r23
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	af 93       	push	r26
 398:	bf 93       	push	r27
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31

	if (INT1_pCallBack!=NULL)
 39e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <INT1_pCallBack>
 3a2:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <INT1_pCallBack+0x1>
 3a6:	30 97       	sbiw	r30, 0x00	; 0
 3a8:	09 f0       	breq	.+2      	; 0x3ac <__vector_2+0x30>
	{
		//call action
		INT1_pCallBack();
 3aa:	09 95       	icall
	}
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <__vector_3>:

//ISR Function prototype for EXTI2
void __vector_3(void) __attribute__ ((signal));
void __vector_3(void)
{
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	5f 93       	push	r21
 3e0:	6f 93       	push	r22
 3e2:	7f 93       	push	r23
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
 3e8:	af 93       	push	r26
 3ea:	bf 93       	push	r27
 3ec:	ef 93       	push	r30
 3ee:	ff 93       	push	r31

	if (INT2_pCallBack!=NULL)
 3f0:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3f4:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3f8:	30 97       	sbiw	r30, 0x00	; 0
 3fa:	09 f0       	breq	.+2      	; 0x3fe <__vector_3+0x30>
	{
		//call action
		INT2_pCallBack();
 3fc:	09 95       	icall
	}
}
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <GI_enable>:
	/* MCAL */
	#include "GI_Interface.h"
	
	void GI_enable(void)
	{
	SET_BIT(SREG,7); //Enable global interrupt
 420:	8f b7       	in	r24, 0x3f	; 63
 422:	80 68       	ori	r24, 0x80	; 128
 424:	8f bf       	out	0x3f, r24	; 63
 426:	08 95       	ret

00000428 <func>:
}


void func(void)
{
	DIO_setPinValue(DIO_PORTA,DIO_PIN3,DIO_PIN_HIGH);
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	67 e0       	ldi	r22, 0x07	; 7
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43c:	2f ef       	ldi	r18, 0xFF	; 255
 43e:	89 e6       	ldi	r24, 0x69	; 105
 440:	98 e1       	ldi	r25, 0x18	; 24
 442:	21 50       	subi	r18, 0x01	; 1
 444:	80 40       	sbci	r24, 0x00	; 0
 446:	90 40       	sbci	r25, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <func+0x1a>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <func+0x24>
 44c:	00 00       	nop
	_delay_ms(500);
	DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	67 e0       	ldi	r22, 0x07	; 7
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTA,DIO_PIN3,DIO_PIN_LOW);
 458:	40 e0       	ldi	r20, 0x00	; 0
 45a:	63 e0       	ldi	r22, 0x03	; 3
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_setPinValue>
 462:	08 95       	ret

00000464 <main>:

void func(void);

int main(void)
{
DIO_setPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPinDirection>
DIO_setPinDirection(DIO_PORTA,DIO_PIN3,DIO_PIN_OUTPUT);
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	63 e0       	ldi	r22, 0x03	; 3
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPinDirection>
DIO_setPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	67 e0       	ldi	r22, 0x07	; 7
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPinDirection>



GI_enable(); //Enable global interrupt
 482:	0e 94 10 02 	call	0x420	; 0x420 <GI_enable>

EXTI_INT0SetCallBack(&func);
 486:	84 e1       	ldi	r24, 0x14	; 20
 488:	92 e0       	ldi	r25, 0x02	; 2
 48a:	0e 94 8e 01 	call	0x31c	; 0x31c <EXTI_INT0SetCallBack>
EXTI_enable(EXTI_INT0,EXTI_RISING_EDGE);
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	0e 94 2a 01 	call	0x254	; 0x254 <EXTI_enable>
 496:	ff cf       	rjmp	.-2      	; 0x496 <main+0x32>

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
